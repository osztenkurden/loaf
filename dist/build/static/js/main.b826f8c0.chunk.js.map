{"version":3,"sources":["API/Loaf.ts","API/index.ts","Context.tsx","Modules/Drawer/index.tsx","Theme/assets/load_icon.svg","Modules/Message/Request.tsx","Modules/Message/Announcement.tsx","Modules/imageExtensions.ts","Modules/Utils.tsx","Modules/Message/FriendMessage.tsx","Modules/Message/Message.tsx","API/ChatImages.ts","Theme/Components/Avatar.tsx","Modules/Chat/AppBar.tsx","Modules/Chat/UploadImagePreview.tsx","Modules/Chat/DragUploadModal.tsx","Modules/Chat/Chat.tsx","Modules/Chat/ChatsListEntry.tsx","Modules/Chat/ChatsList.tsx","Theme/Components/LoafButton.tsx","Modules/NewContact/index.tsx","Modules/NewConversation/index.tsx","Modules/Main/index.tsx","Modules/Login/index.tsx","Modules/Register/index.tsx","Modules/Splash/index.tsx","App.tsx","Window.tsx","Theme/index.ts","index.tsx"],"names":["ipcRenderer","window","ipcApi","api","eventName","sync","args","sendSync","send","on","callback","session","getCookie","Loaf","chats","accept","chatId","createGroup","name","users","get","loadImage","force","loadPageOfMessages","page","updateChatInfo","image","message","localUUID","call","make","data","reject","answer","error","user","add","userId","authenticate","authCode","getUserByName","load","logout","logIn","username","password","register","pwd","UserContext","React","createContext","Drawer","menu","text","icon","GroupAdd","action","this","props","newConversation","PersonAdd","newContact","secondMenu","PermMedia","Settings","Cancel","ContactSupport","className","Consumer","firstName","Divider","List","map","menuEl","ListItem","button","key","onClick","ListItemIcon","classes","root","ListItemText","primary","Component","Request","chat","CheckCircleRounded","style","color","cursor","id","BlockRounded","Announcement","request","status","questionMark","textToRGB","i","c","str","hash","length","charCodeAt","hashCode","toString","toUpperCase","substring","scrollToBottom","top","messageContainer","document","getElementById","scroll","bottom","scrollHeight","scrollTop","clientHeight","getLast","messages","last","maxPage","Math","max","pages","lastPage","find","getMessagesFromLastPage","Date","date","sortChats","sort","a","b","aLast","bLast","handleFileClick","fileData","fileName","open","base64","downloadLink","createElement","href","download","click","downloadFile","filePreview","file","fileType","substr","indexOf","CloudDownload","Audiotrack","InsertDriveFile","fileIcon","bytesToString","size","renderGallery","filter","type","payload","content","startsWith","imageExtensions","extension","endsWith","src","alt","bytes","unit","toFixed","FriendMessage","renderAvatar","sender","Avatar","renderContent","MessageContent","Message","my","temporary","storage","images","onLoad","Map","imageUrl","getTime","set","loading","img","LoafAvatar","editable","avatar","backgroundColor","charAt","AddAPhoto","LoafAppBar","AppBar","position","Toolbar","paddingTop","paddingBottom","htmlFor","creatorId","display","onChange","e","files","private","reader","FileReader","readAsDataURL","onload","result","handleFiles","target","inset","secondary","DragUploadModal","renderEntry","setFiles","backgroundImage","sendFiles","state","highlight","stopPropagation","CloudUpload","isLoading","Chat","allow","preventDefault","whileOver","evt","setState","drop","dataTransfer","componentDidMount","setTimeout","filesToSend","readFile","index","push","getAllMessagesCount","reduce","loadMoreMessages","loadMoreByScroll","_inView","entry","intersectionRatio","form","handleKeyDown","textMessage","sendMessages","addTemporaryMessage","newTemporaryMessage","uuid","senderId","toISOString","uuidv4","console","log","filePayload","handleChange","value","temporaryMessages","minimumPage","min","sortMessages","flat","onDragOver","onDragEnter","onDragOverCapture","onDragEnd","onDragLeave","onDrop","threshold","trackVisibility","delay","as","Fragment","msg","dateToCheck","moment","format","allMessages","messageIndex","isThisFirstDateOccurence","TextField","onKeyDown","placeholder","fullWidth","variant","InputLabelProps","shrink","InputProps","inputProps","Attachment","fontSize","htmlColor","getLastTag","getSubText","ChatsListEntry","isCurrent","unread","loadChat","fromNow","ChatsList","chatImage","currentChat","LoafButton","main","big","rest","Button","disableElevation","children","NewContact","ev","addContact","onClose","closeDrawer","Paper","DialogTitle","DialogContent","width","disabled","startAdornment","InputAdornment","DialogActions","NewConversation","toggleChatEntry","selectedChats","includes","createConversation","userIds","dense","ListItemAvatar","ListItemSecondaryAction","IconButton","edge","aria-label","Remove","Add","addPageToChat","existingEntry","pageEntry","didLastPageChange","newPages","maxNewPage","newMaxPageEntry","lastPageEntry","currentUUIDs","newUUIDs","currentUUID","Main","setContactModal","newContactModal","setConversationModal","newConversationModal","toggleDrawer","drawer","temporaryMessage","container","newChats","newInCurrent","newCurrentChat","indexOfCurrentChat","findIndex","chatPage","targetChat","Menu","Typography","noWrap","logo","Search","SwipeableDrawer","onOpen","paper","Modal","Login","keyPress","event","field","API","validate","authentication","required","onKeyPress","togglePage","Register","renderError","done","qrcode","renderForm","marginTop","QRCode","toDataURL","url","Backdrop","CircularProgress","SplashScreen","LinearProgress","App","getUser","Provider","loggedInUser","useState","setError","showError","setShowError","useEffect","theme","createMuiTheme","overrides","MuiAppBar","positionFixed","borderBottom","borderImage","boxShadow","left","right","positionRelative","MuiButton","textPrimary","MuiDivider","marginRight","MuiListItem","transition","MuiListItemIcon","marginLeft","transform","MuiTypography","palette","dark","light","typography","fontFamily","Theme","ReactDOM","render"],"mappings":"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","file":"static/js/main.b826f8c0.chunk.js","sourcesContent":["\r\nconst ipcRenderer = window.ipcApi;\r\n\r\nexport const api = (eventName: string, sync: boolean, ...args: any[]) => {\r\n    if(!ipcRenderer) return;\r\n    if (sync) {\r\n        return ipcRenderer.sendSync(eventName, ...args);\r\n    }\r\n    ipcRenderer.send(eventName, ...args);\r\n    return;\r\n    // return new Promise((res, rej) => {\r\n        /*ipcRenderer.on(`${eventName}`, (event, ...vals) => {\r\n            //\r\n            ipcRenderer.removeAllListeners(`${eventName}`);\r\n        });*/\r\n   // });\r\n};\r\n\r\nexport const on = (eventName: string, callback: (...args: any[]) => void) => {\r\n    if(!ipcRenderer) return;\r\n    ipcRenderer.on(eventName, (...vals: any[]) => {\r\n        callback(...vals);\r\n    });\r\n};\r\n","import * as I from \"../../modules/interface\";\r\nimport * as Loaf from \"./Loaf\";\r\n\r\nconst api = {\r\n    session: {\r\n        getCookie: () => Loaf.api(\"getCookie\", true)\r\n    },\r\n    chats: {\r\n        accept: (chatId: number) => Loaf.api(\"acceptChat\", false, chatId),\r\n        createGroup: (name: string, users: number[]) => Loaf.api(\"createGroup\", false, name, users),\r\n        get: () => Loaf.api(\"getChats\", false),\r\n        loadImage: (chatId: number, force = false) => Loaf.api(\"loadImage\", false, chatId, force),\r\n        loadPageOfMessages: (chatId: number, page: number) => Loaf.api(\"loadPageOfMessages\", false, chatId, page),\r\n        updateChatInfo: (chatId: number, name: string, image?: string) => Loaf.api('updateChat', false, chatId, name, image)\r\n    },\r\n    message: {\r\n        send: (chatId: number, message: I.IMessageContent, localUUID: string) => Loaf.api(\"sendMessage\", false, chatId, message, localUUID),\r\n    },\r\n    call: {\r\n      make: (data: I.CallDescription) => Loaf.api('call-to-user', false, data),\r\n      reject: () => Loaf.api('reject-call', false),\r\n      answer: (data: I.CallDescription) => Loaf.api('exchange-offer', false, data),\r\n      accept: (data: I.CallDescription) => Loaf.api('accept-call', false, data),\r\n      error: () => Loaf.api('errortest', false)\r\n    },\r\n    user: {\r\n        add: (userId: number | string) => Loaf.api(\"addUser\", false, userId),\r\n        authenticate: (authCode: number) => Loaf.api(\"authenticateUser\", false, authCode),\r\n        get: () => Loaf.api(\"getUser\", true),\r\n        getUserByName: (name: string) => Loaf.api(\"getUserByName\", false, name),\r\n        load: () => Loaf.api(\"loadUser\", false),\r\n        logout: () => Loaf.api(\"logout\", false),\r\n        logIn: (username: string, password: string) => Loaf.api(\"logInUser\", false, username, password),\r\n        register: (username: string, pwd: string, name: string) => Loaf.api(\"register\", false, username, pwd, name ),\r\n    },\r\n};\r\n\r\nexport default api;\r\n","import React from 'react';\r\nimport * as I from \"./../modules/interface\";\r\nexport const UserContext = React.createContext<I.IUser | null>(null);","import React, { Component } from 'react';\r\nimport { ListItemIcon, List, Divider, ListItem, ListItemText } from '@material-ui/core';\r\nimport { Settings, GroupAdd, PersonAdd, Cancel, ContactSupport, PermMedia } from '@material-ui/icons';\r\nimport api from 'API';\r\nimport { UserContext } from 'Context';\r\n\r\ninterface IProps {\r\n  newContact: () => void,\r\n  newConversation: () => void,\r\n}\r\n\r\ntype MenuEntry = {\r\n  text: string,\r\n  icon: any,\r\n  action?: () => any | Promise<any>\r\n}\r\n\r\n\r\nexport default class Drawer extends Component<IProps> {\r\n  render() {\r\n    const menu: MenuEntry[] = [{\r\n      text: \"New Conversation\",\r\n      icon: GroupAdd,\r\n      action: this.props.newConversation\r\n    }, {\r\n      text: \"Add Contact\",\r\n      icon: PersonAdd,\r\n      action: this.props.newContact\r\n    }];\r\n\r\n    const secondMenu: MenuEntry[] = [{\r\n      text: \"Media\",\r\n      icon: PermMedia\r\n    }, {\r\n      text: \"Settings\",\r\n      icon: Settings\r\n    }, {\r\n      text: \"Logout\",\r\n      icon: Cancel,\r\n      action: api.user.logout\r\n    }, {\r\n      text: \"About LOAF\",\r\n      icon: ContactSupport\r\n    }];\r\n    return (<div className='sidenav'>\r\n      <UserContext.Consumer>\r\n        {user => user ? (\r\n          <div className='userView'>\r\n            <div className='background'></div>\r\n            <span className='firstName'>{user.firstName}</span>\r\n            <span className='username'>@{user.username}</span>\r\n          </div>\r\n        ) : null}\r\n      </UserContext.Consumer>\r\n      <Divider />\r\n      <List>\r\n        {menu.map((menuEl) => (\r\n          <ListItem button key={menuEl.text} className='menu' onClick={menuEl.action}>\r\n            <ListItemIcon classes={{ root: 'menu-icon' }}><menuEl.icon /></ListItemIcon>\r\n            <ListItemText classes={{ primary: 'menu-entry' }} primary={menuEl.text} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n      <Divider />\r\n      <List>\r\n        {secondMenu.map((menuEl) => (\r\n          <ListItem button key={menuEl.text} className='menu' onClick={menuEl.action}>\r\n            <ListItemIcon classes={{ root: 'menu-icon' }}><menuEl.icon /></ListItemIcon>\r\n            <ListItemText classes={{ primary: 'menu-entry' }} primary={menuEl.text} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </div>);\r\n  }\r\n}","export default __webpack_public_path__ + \"static/media/load_icon.f5b74f47.svg\";","import { BlockRounded, CheckCircleRounded } from \"@material-ui/icons\";\r\nimport React, { Component } from \"react\";\r\nimport * as I from \"./../../../modules/interface\";\r\n\r\ninterface IProps {\r\n    chat: I.IChatPaged;\r\n    accept: (chatId: number) => void;\r\n}\r\n\r\nexport default class Request extends Component<IProps> {\r\n    public render() {\r\n        const { chat, accept } = this.props;\r\n        return <div className={\"announcement message\"}>\r\n            <div>\r\n                <p>You've got a request from <strong>{chat.name}</strong>. Accept?</p>\r\n                <p>\r\n                    <CheckCircleRounded\r\n                        style={{ color: \"#2fc52f\", cursor: 'pointer' }}\r\n                        onClick={() => accept(chat.id)} />\r\n                    <BlockRounded style={{ color: \"red\", cursor: 'pointer' }} />\r\n                </p>\r\n            </div>\r\n        </div>;\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport * as I from \"./../../../modules/interface\";\r\nimport api from \"./../../API\";\r\nimport Request from \"./Request\";\r\n\r\nexport default class Announcement extends Component<{ request: boolean, chat: I.IChatPaged }> {\r\n    public render() {\r\n        const { chat, request } = this.props;\r\n        if (request) {\r\n            return <Request chat={chat} accept={() => api.chats.accept(chat.id)}/>;\r\n        }\r\n        return <div className={\"announcement message\"}>\r\n            <p>{\r\n                chat.status === 5 ?\r\n                `${chat.name} still hasn't accepted your request`\r\n                : \"No messages\"\r\n                }\r\n            </p>\r\n        </div>;\r\n    }\r\n}\r\n","export default [\r\n\t\"ase\",\r\n\t\"art\",\r\n\t\"bmp\",\r\n\t\"blp\",\r\n\t\"cd5\",\r\n\t\"cit\",\r\n\t\"cpt\",\r\n\t\"cr2\",\r\n\t\"cut\",\r\n\t\"dds\",\r\n\t\"dib\",\r\n\t\"djvu\",\r\n\t\"egt\",\r\n\t\"exif\",\r\n\t\"gif\",\r\n\t\"gpl\",\r\n\t\"grf\",\r\n\t\"icns\",\r\n\t\"ico\",\r\n\t\"iff\",\r\n\t\"jng\",\r\n\t\"jpeg\",\r\n\t\"jpg\",\r\n\t\"jfif\",\r\n\t\"jp2\",\r\n\t\"jps\",\r\n\t\"lbm\",\r\n\t\"max\",\r\n\t\"miff\",\r\n\t\"mng\",\r\n\t\"msp\",\r\n\t\"nef\",\r\n\t\"nitf\",\r\n\t\"ota\",\r\n\t\"pbm\",\r\n\t\"pc1\",\r\n\t\"pc2\",\r\n\t\"pc3\",\r\n\t\"pcf\",\r\n\t\"pcx\",\r\n\t\"pdn\",\r\n\t\"pgm\",\r\n\t\"PI1\",\r\n\t\"PI2\",\r\n\t\"PI3\",\r\n\t\"pict\",\r\n\t\"pct\",\r\n\t\"pnm\",\r\n\t\"pns\",\r\n\t\"ppm\",\r\n\t\"psb\",\r\n\t\"psd\",\r\n\t\"pdd\",\r\n\t\"psp\",\r\n\t\"px\",\r\n\t\"pxm\",\r\n\t\"pxr\",\r\n\t\"qfx\",\r\n\t\"raw\",\r\n\t\"rle\",\r\n\t\"sct\",\r\n\t\"sgi\",\r\n\t\"rgb\",\r\n\t\"int\",\r\n\t\"bw\",\r\n\t\"tga\",\r\n\t\"tiff\",\r\n\t\"tif\",\r\n\t\"vtf\",\r\n\t\"xbm\",\r\n\t\"xcf\",\r\n\t\"xpm\",\r\n\t\"3dv\",\r\n\t\"amf\",\r\n\t\"ai\",\r\n\t\"awg\",\r\n\t\"cgm\",\r\n\t\"cdr\",\r\n\t\"cmx\",\r\n\t\"dxf\",\r\n\t\"e2d\",\r\n\t\"egt\",\r\n\t\"eps\",\r\n\t\"fs\",\r\n\t\"gbr\",\r\n\t\"odg\",\r\n\t\"svg\",\r\n\t\"stl\",\r\n\t\"vrml\",\r\n\t\"x3d\",\r\n\t\"sxd\",\r\n\t\"v2d\",\r\n\t\"vnd\",\r\n\t\"wmf\",\r\n\t\"emf\",\r\n\t\"art\",\r\n\t\"xar\",\r\n\t\"png\",\r\n\t\"webp\",\r\n\t\"jxr\",\r\n\t\"hdp\",\r\n\t\"wdp\",\r\n\t\"cur\",\r\n\t\"ecw\",\r\n\t\"iff\",\r\n\t\"lbm\",\r\n\t\"liff\",\r\n\t\"nrrd\",\r\n\t\"pam\",\r\n\t\"pcx\",\r\n\t\"pgf\",\r\n\t\"sgi\",\r\n\t\"rgb\",\r\n\t\"rgba\",\r\n\t\"bw\",\r\n\t\"int\",\r\n\t\"inta\",\r\n\t\"sid\",\r\n\t\"ras\",\r\n\t\"sun\",\r\n\t\"tga\",\r\n\t\"heic\",\r\n\t\"heif\"\r\n]","import React from 'react';\r\nimport * as I from '../../modules/interface';\r\nimport { Audiotrack, InsertDriveFile, CloudDownload } from \"@material-ui/icons\";\r\nimport imageExtensions from './imageExtensions';\r\n\r\nexport function hashCode(str: string) { // java String#hashCode\r\n    let hash = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        // tslint:disable-next-line:no-bitwise\r\n        hash = str.charCodeAt(i) + ((hash << 5) - hash);\r\n    }\r\n    return hash;\r\n}\r\n\r\nconst downloadFile = (base64: string, fileName: string) => {\r\n    const downloadLink = document.createElement(\"a\");\r\n    downloadLink.href = base64;\r\n    downloadLink.download = fileName;\r\n    downloadLink.click();\r\n}\r\n\r\nexport const questionMark = 'iVBORw0KGgoAAAANSUhEUgAAAHQAAAB0CAQAAAD+k96sAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAAmJLR0QA/4ePzL8AAAAHdElNRQfkAg8WFhR9Sw5qAAAD4klEQVR42u2bTWhVRxSAv/jEkPeoxp+ApqGgtMFoRKORRCzSRcG0Cy0tuCh0WySCdtdEKuJGrcSFIAhtQcGAFFpL4kLQ2ig1pC30h9dU8AeiRpqfFqttjTGa3C4erUWomXPvnXvvKecbyGrezHyZmXfPnDsPDMMwDCN2yry2nmcVK3iOGmqoJk8FFVQwxQPGGed3hhhmiBv08xO/aBStpIWNrGUpOefPjPI1PfRQZErDCplNK1/wkCB0GeUIGzyvtIg08CF/RlD8dxlkJ/OyKLmKrpgUH5d7HGZRliSr+Zip2DVL5Q/aKc/Gt/ZW7nqS/LtcoyltzQV87lmyVB7Sxoz0NNdwIxHNUvkkrSX8KvcT1AwIOM+c5DU38SBhzYCAPiqSns2JFDQDAj4Lu1dzIT5Tz+mk/7P/sJRZnEvqm/Z6SrNZKpOsT0b001Q1S8/VvH/Nt1LXDAho8605n98yIXqbSunQZ4pq75J3AMA4PVzkO64zzBhlzKWS+aykmWZeCNHeXHawx998Lgn17LxCK4WntNrIsRChx6DPkPCDEMN53WlAz3JG3HaLv/05JhxKp2Chl7GDR6LWj/sSbRdqbhf3sIVJQftDvkSviDTfCdXHe6I+lvnJB0mG8H7IXnJ8K+jlbR+i+wUD6I9wcmwR9HPQh+iPzt0/ojFST9ecezoVv2aVIPnVGbGvA4KVI8DtsfuSIKHcEVH0onPNOfGLumfhivwQUfSyc81n4hetd26vO/I2+dm5ZiF+0RXO7V2ILDrmXFP0Mmqm4x4tUKBAftq/xcii7vN0P37Rqwlmhdzj4zvxL91k01+u3NItutq55oBu0c3ONb9HMbWCWHe9ZtETggRZTq/mi4KY+qhezdkMCBbuGq2aM+gWaPbqnc8OUQ5ji1bNXSLN3mzfQ/pv9oo0JwSnqQxRzjFhInWfRs2F9Ak1v2SWPs1Gbgk1B6jSp7mNcaHmHUEKICNUclL8WulXfUFCU4h7EEMs16bZGuI9az9LdEnm6QzxMrlLltpMnxqKIa7b7NEWB9WG2JkjvKxtZzYwItY8l60b2C6sE19fnuDdDGa0pmEZt4WalzUerKu4KdT8SPZeJSuZg7PCMO8NnWdN2W2WIs/r1KwTBe4nkri36YfzAs1DWhMk8JpAc7fevF4ZlwSzqZhXBBdpcppFTztq3tR2Nnkyh+D6K9LNqOZN57Omco46ijZoF3U7Yn+TXCTqh3LqnOp1axdd7Hix5yvtotWO9S5pF3VLgQSMYhiGYRiGYRh+8JVJDVIfQUJBfeYwURM1URM1URM1URM1URM1URM1URM1URM1DOP/zl+IROP1bg+NpwAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAyMC0wMi0xNVQyMjoyMjoyMCswMDowMBpZaTEAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMjAtMDItMTVUMjI6MjI6MjArMDA6MDBrBNGNAAAAAElFTkSuQmCC';\r\nexport function textToRGB(i: string) {\r\n    // tslint:disable-next-line:no-bitwise\r\n    const c = (hashCode(i) & 0x00FFFFFF)\r\n        .toString(16)\r\n        .toUpperCase();\r\n\r\n    return \"#\" + \"00000\".substring(0, 6 - c.length) + c;\r\n}\r\nexport const scrollToBottom  = (top = 0) => {\r\n    const messageContainer = document.getElementById(\"message_container\");\r\n    if(!messageContainer) return 0;\r\n    if(top){\r\n        messageContainer.scroll({ top });\r\n        return;\r\n    }\r\n    const bottom = messageContainer.scrollHeight - messageContainer.scrollTop - messageContainer.clientHeight;\r\n\r\n    if(bottom <= 100){\r\n        messageContainer.scroll({ top: messageContainer.scrollHeight });\r\n    }\r\n    return;\r\n}\r\nexport const fileIcon = (fileType: string) => {\r\n    if(fileType === \"audio\") {\r\n        return <Audiotrack />;\r\n    }\r\n    return <InsertDriveFile />;\r\n}\r\n\r\n\r\nexport const getMessagesFromLastPage = (chat: I.IChatPaged | null) => {\r\n    if(!chat) return [];\r\n    if(chat.last) return [chat.last];\r\n    const maxPage = Math.max(...chat.pages.map(page => page.page));\r\n    const lastPage = chat.pages.find(page => page.page === maxPage);\r\n    if(!lastPage) return [];\r\n    return lastPage.messages;\r\n}\r\nexport const getLast = (chat: I.IChatPaged | null) => {\r\n    const messages = getMessagesFromLastPage(chat);\r\n    let last: I.IMessage | null = null;\r\n\r\n    for(const message of messages){\r\n        if(!last){\r\n            last = message;\r\n            continue;\r\n        }\r\n        if(new Date(message.date) > new Date(last.date)){\r\n            last = message;\r\n        }\r\n    }\r\n    return last;\r\n}\r\n\r\nexport const sortChats = (chats: I.IChatPaged[]) => {\r\n    const sortedChats = [...chats].sort((a, b) => {\r\n        const [aLast, bLast] = [getLast(a), getLast(b)];\r\n\r\n        if(!aLast || !bLast) return 0;\r\n        const [aDate, bDate] = [new Date(aLast.date), new Date(bLast.date)];\r\n\r\n        if(aDate > bDate) return -1;\r\n        return 1;\r\n    });\r\n    return sortedChats;\r\n}\r\n\r\nexport const sortMessages = (messages: I.IMessage[]) => {\r\n    messages.sort((a, b) => {\r\n        if(a.date === b.date) return 0;\r\n\r\n        return new Date(a.date).getTime() - new Date(b.date).getTime();\r\n    });\r\n    return messages;\r\n}\r\n\r\nconst handleFileClick = (fileData: string, fileName: string, open?: boolean) => {\r\n    if(!open){\r\n        downloadFile(fileData, fileName);\r\n        return;\r\n    }\r\n\r\n    window.ipcApi.send('openFileDirectory', fileData);\r\n}\r\n\r\nexport const filePreview = (file: I.IMessageContentFileMeta, open?: boolean) => {\r\n    const fileData = file.data;\r\n    const fileType = fileData.substr(fileData.indexOf(':') + 1, fileData.indexOf('/') - fileData.indexOf(':') - 1);\r\n    return (\r\n        <div className=\"file-preview\">\r\n            <div className=\"file-icon\" onClick={() => handleFileClick(fileData, file.name, open)} >\r\n                <div className=\"hover-icon\">\r\n                    <CloudDownload />\r\n                </div>\r\n                <div className=\"default-icon\">\r\n                    {fileIcon(fileType)}\r\n                </div>\r\n            </div>\r\n            <div className=\"file-data\">\r\n                <div className=\"file-name\">\r\n                    {file.name}\r\n                </div>\r\n                <div className=\"file-size\">\r\n                    {bytesToString(file.size)}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function renderGallery(message: I.IMessageContentPackage[], open?: boolean) {\r\n    const isFile = (file: I.IMessageContentPackage): file is I.IMessageContentFile => file.type === \"file\";\r\n    return <div className=\"many-msg-types\">\r\n        {message.filter(isFile).map(payload => {\r\n            const fileData = payload.content.data;\r\n            const fileName = payload.content.name;\r\n            if (fileData.startsWith(\"data:image\") || imageExtensions.find(extension => fileName.endsWith(`.${extension}`))) {\r\n                return <img src={fileData} alt={'Upload'} />\r\n            }\r\n            return filePreview(payload.content, open);\r\n        })}\r\n        {message.filter(payload => payload.type === \"text\").map(payload => <p>{payload.content}</p>)}\r\n\r\n    </div>\r\n}\r\n\r\nexport function bytesToString(bytes: number) {\r\n    function toHigherOrder(lowerBytes: number) {\r\n        return (lowerBytes / 1024);\r\n    }\r\n\r\n    const units = [\"B\", \"KB\", \"MB\", \"GB\", \"TB\"];\r\n\r\n    for (const unit of units) {\r\n        if (bytes < 1024) {\r\n            return `${bytes.toFixed(1)} ${unit}`;\r\n        }\r\n        bytes = toHigherOrder(bytes);\r\n    }\r\n\r\n    return `${bytes.toFixed(1)} PB`;\r\n}","import React, { Component } from \"react\";\r\nimport { textToRGB, renderGallery, questionMark } from './../Utils';\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport * as I from \"./../../../modules/interface\";\r\n\r\nexport default class FriendMessage extends Component<{message: I.IMessage, sender: { username: string, id: number}}>{\r\n    renderAvatar = () => {\r\n        const { sender } = this.props;\r\n        \r\n        \r\n        //TODO: Avatar as URL and fallback\r\n        \r\n        return <Avatar src={``} className=\"avatar\"/>\r\n        \r\n        /*return <Avatar className=\"avatar\" style={{ backgroundColor: textToRGB(sender.username) }}>\r\n            {sender.username?.charAt(0).toUpperCase() || `#${sender.id}`}\r\n        </Avatar>*/\r\n    }\r\n    renderContent = () => {\r\n        const { message } = this.props;\r\n        switch(message.content.type){\r\n            case \"text\":\r\n                return <p>{message.content.content}</p>\r\n            case \"file\":\r\n                return renderGallery([message.content], true);\r\n            case \"mixed\":\r\n                return renderGallery(message.content.content, true);\r\n        }\r\n    }\r\n    public render(){\r\n        const { message, sender } = this.props;\r\n        return <div className={`message friend ${message.content.type}`}>\r\n            {this.renderAvatar()}\r\n            <div className=\"message-container\">\r\n                <div className=\"message-sender-name\">\r\n                    {sender.username}\r\n                </div>\r\n                {this.renderContent()}\r\n            </div>\r\n        </div>;\r\n    }\r\n}","import { questionMark, renderGallery } from \"Modules/Utils\";\r\nimport React, { Component } from \"react\";\r\nimport * as I from \"./../../../modules/interface\";\r\nimport FriendMessage from './FriendMessage'\r\n\r\ntype Props = { message: I.IAnyMessage };\r\n\r\nconst MessageContent = ({ message }:{ message: I.IAnyMessage }) => {\r\n    switch (message.content.type) {\r\n        case \"text\":\r\n            return <p>{message.content.content}</p>\r\n        case \"file\":\r\n            return renderGallery([message.content])\r\n        case \"mixed\":\r\n            return renderGallery(message.content.content);\r\n    }\r\n}\r\n\r\nconst Message = ({ message }: Props) => {\r\n    if(!message.my && message.sender) {\r\n        return <FriendMessage message={message} sender={message.sender} />\r\n    }\r\n\r\n    return (\r\n        <div className={`message ${message.temporary ? 'sending':''}`}>\r\n            <MessageContent message={message} />\r\n        </div>\r\n    )\r\n}\r\nexport default Message;\r\n","\r\nimport api from './';\r\nimport * as Loaf from \"./Loaf\";\r\ninterface ChatImage {\r\n    loading: boolean;\r\n    image: string | null;\r\n}\r\n\r\nclass ChatImageStorage {\r\n    images: Map<number, ChatImage>;\r\n    onLoad?: () => void;\r\n    constructor(){\r\n        this.images = new Map();\r\n        this.onLoad = () => {}\r\n        Loaf.on(\"imageLoaded\", (data: {id: number, image: string|null}) => {\r\n            const imageUrl = data.image ? data.image + `?cache=${new Date().getTime()}` : null\r\n            this.images.set(data.id, {loading:false, image:imageUrl});\r\n            if(this.onLoad) this.onLoad();\r\n        });\r\n        Loaf.on(\"updatedChat\", (data: { chatId: number, data: any }) => {\r\n            api.chats.loadImage(data.chatId, true);\r\n        });\r\n    }\r\n    set(onLoad: () => void){\r\n        this.onLoad = onLoad;\r\n        return this;\r\n    }\r\n    get(chatId: number){\r\n        const img = this.images.get(chatId);\r\n        if(!img) return this.load(chatId);\r\n        if(img.loading){ return null};\r\n        return img.image;\r\n    }\r\n\r\n    private load(chatId: number){\r\n        this.images.set(chatId, {loading: true, image: null});\r\n        api.chats.loadImage(chatId);\r\n        return null;\r\n    }\r\n}\r\nconst storage = new ChatImageStorage();\r\nexport default storage;\r\n\r\nexport { ChatImageStorage };\r\n","import { Avatar } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport * as I from \"./../../../modules/interface\";\r\nimport { textToRGB } from './../../Modules/Utils';\r\nimport storage from \"./../../API/ChatImages\";\r\nimport { AddAPhoto } from \"@material-ui/icons\";\r\n\r\ninterface IProps {\r\n    chat: I.IChatPaged;\r\n    editable?: boolean\r\n}\r\n\r\nconst LoafAvatar = ({ chat, editable }: IProps) => {\r\n    let avatar = <Avatar className=\"avatar\" style={{ backgroundColor: textToRGB(chat.name) }}>\r\n        {chat.name.charAt(0)?.toUpperCase() || \"#\"}\r\n    </Avatar>;\r\n    if (chat.image) {\r\n        avatar = <Avatar src={'file://' + storage.get(chat.id) as string} className=\"avatar\" />\r\n    }\r\n    return <div className={`avatar-container ${editable ? 'editable':''}`}>\r\n        {avatar}\r\n        {editable ? <div className=\"editable-hover\"><AddAPhoto /></div> : null}\r\n    </div>\r\n}\r\n\r\nexport default LoafAvatar;\r\n","import React from 'react';\r\nimport { AppBar, Toolbar, ListItem } from '@material-ui/core';\r\nimport * as I from \"./../../../modules/interface\";\r\nimport { ListItemText } from '@material-ui/core';\r\nimport api from \"./../../API\";\r\nimport LoafAvatar from 'Theme/Components/Avatar';\r\nimport { UserContext } from 'Context';\r\n\r\ninterface IProps {\r\n    chat: I.IChatPaged;\r\n}\r\n\r\n\r\nexport const LoafAppBar = (props: IProps) => {\r\n    const { chat } = props;\r\n    const handleFiles = (files: FileList | null) => {\r\n        if (chat.private) return;\r\n        if (!files || !files.length) return;\r\n\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(files[0]);\r\n        reader.onload = () => {\r\n            if (typeof reader.result !== \"string\") {\r\n                return;\r\n            }\r\n            api.chats.updateChatInfo(chat.id, chat.name, reader.result);\r\n        }\r\n    }\r\n\r\n\r\n    return <AppBar position=\"relative\" >\r\n        <Toolbar className=\"bar\">\r\n            <ListItem style={{ paddingTop: 0, paddingBottom: 0 }}>\r\n\r\n                <UserContext.Consumer>\r\n                    {user => (\r\n                        <>\r\n                            <label htmlFor=\"chat_image_upload_button\">\r\n                                <LoafAvatar chat={chat} editable={!!user && user.id === chat.creatorId} />\r\n                            </label>\r\n                            { !!user && user.id === chat.creatorId && <input id=\"chat_image_upload_button\" type=\"file\" accept='image/*' style={{ display: 'none' }} onChange={e => handleFiles(e.target.files)} />}\r\n                        </>\r\n                    )}\r\n                </UserContext.Consumer>\r\n                <ListItemText inset\r\n                    className=\"chat-text-item\"\r\n                    primary={\r\n                        <div className={\"chat-name\"}>\r\n                            <div className=\"chat-name-text\">{chat.name}</div>\r\n                        </div>\r\n                    } secondary={\r\n\r\n                        <div className=\"chat-last-message\">\r\n                            <div className=\"text\">\r\n                                {chat.last?.my ?\r\n                                    <span className=\"you\">Ty:</span>\r\n                                    : \"\"} Last seen 10 minutes ago</div>\r\n                        </div>} />\r\n            </ListItem>\r\n        </Toolbar>\r\n    </AppBar>\r\n}\r\n/*export default class LoafAppBar extends React.Component<IProps> {\r\n    public handleFiles = (files: FileList | null) => {\r\n        const { chat } = this.props;\r\n        if (chat.private) return;\r\n        if (!files || !files.length) return;\r\n\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(files[0]);\r\n        reader.onload = () => {\r\n            if (typeof reader.result !== \"string\") {\r\n                return;\r\n            }\r\n            api.chats.updateChatInfo(chat.id, chat.name, reader.result);\r\n        }\r\n    }\r\n    public render() {\r\n        const { chat } = this.props;\r\n        return <AppBar position=\"relative\" >\r\n            <Toolbar className=\"bar\">\r\n                <ListItem style={{ paddingTop: 0, paddingBottom: 0 }}>\r\n\r\n                    <label htmlFor=\"chat_image_upload_button\">\r\n                        {chat.image ?\r\n                            <Avatar src={storage.get(chat.id) as string} className='avatar' /> :\r\n                            <Avatar className=\"avatar\" style={{ backgroundColor: textToRGB(chat.name) }}>\r\n                                {chat.name.charAt(0)?.toUpperCase() || '#'}\r\n                            </Avatar>\r\n                        }\r\n                    </label>\r\n                    <input id=\"chat_image_upload_button\" type=\"file\" accept='image/*' style={{ display: 'none' }} onChange={e => this.handleFiles(e.target.files)}/>\r\n                    <ListItemText inset\r\n                        className=\"chat-text-item\"\r\n                        primary={\r\n                            <div className={\"chat-name\"}>\r\n                                <div className=\"chat-name-text\">{chat.name}</div>\r\n                            </div>\r\n                        } secondary={\r\n\r\n                            <div className=\"chat-last-message\">\r\n                                <div className=\"text\">\r\n                                    {chat.last?.my ?\r\n                                        <span className=\"you\">Ty:</span>\r\n                                        : \"\"} Last seen 10 minutes ago</div>\r\n                            </div>} />\r\n                </ListItem>\r\n            </Toolbar>\r\n        </AppBar>\r\n    }\r\n}*/\r\n\r\nexport default LoafAppBar;","import React, { Component } from \"react\";\r\nimport { FilePayloadData } from './Chat';\r\nimport { bytesToString, questionMark } from './../Utils';\r\nimport { Cancel } from '@material-ui/icons';\r\n\r\ninterface IProps {\r\n    images: FilePayloadData[];\r\n    setFiles: (files: FilePayloadData[]) => void;\r\n    sendFiles: () => void;\r\n}\r\n\r\nexport default class DragUploadModal extends Component<IProps> {\r\n    public render() {\r\n        const { images, sendFiles } = this.props;\r\n        return (\r\n            <div className=\"upload-image-preview\">\r\n                <div className=\"upload-entries-preview\">\r\n                    {images.map(this.renderEntry)}\r\n                </div>\r\n                <div className=\"image-send btn-behaviour\" onClick={sendFiles}>SEND</div>\r\n            </div>\r\n        );\r\n    }\r\n    private renderEntry = (file: FilePayloadData) => {\r\n        const { images, setFiles } = this.props;\r\n        return <div className=\"upload-entry-preview\">\r\n            <div className=\"preview-image-container\">\r\n                <div className=\"preview-image\" style={{backgroundImage: file.data.startsWith('data:image') ? `url(${file.data})` : `url(data:image/jpeg;base64,${questionMark})`}}></div>\r\n            </div>\r\n            <div className=\"preview-data-container\">\r\n                <div className=\"preview-data-name\">{file.name}</div>\r\n                <div className=\"preview-data-size\">{bytesToString(file.size)}</div>\r\n            </div>\r\n            <div className=\"preview-action-container\">\r\n                <div className=\"cancel-file\" onClick={() => setFiles(images.filter(img => img !== file))}><Cancel /></div>\r\n            </div>\r\n        </div>\r\n    }\r\n\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { CloudUpload } from \"@material-ui/icons\";\r\nimport { FilePayloadData } from './Chat';\r\nimport UploadImagePreview from './UploadImagePreview';\r\n\r\ninterface IProps {\r\n    images: FilePayloadData[];\r\n    setFiles: (files: FilePayloadData[]) => void;\r\n    sendFiles: () => void;\r\n}\r\ninterface IState {\r\n    highlight: boolean;\r\n}\r\n\r\nexport default class DragUploadModal extends Component<IProps, IState> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            highlight: false\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        const { images, sendFiles, setFiles } = this.props;\r\n        return (\r\n            <div className=\"drag-show\" onClick={() => setFiles([])}>\r\n                <div className={`drag-window ${images.length ? 'dropped' : ''}`} onClick={e => e.stopPropagation()}>\r\n                    {images.length ? <UploadImagePreview\r\n                        setFiles={setFiles}\r\n                        sendFiles={sendFiles}\r\n                        images={images}\r\n                    /> : <div className='drag-window-content'>\r\n                            <CloudUpload />\r\n                            Drop your images here\r\n                        </div>}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n","import { TextField } from \"@material-ui/core\";\r\nimport moment from \"moment\";\r\nimport React, { Component } from \"react\";\r\nimport Announcement from \"../Message/Announcement\";\r\nimport Message from \"../Message/Message\";\r\nimport * as Loaf from \"./../../API/Loaf\";\r\nimport * as I from \"./../../../modules/interface\";\r\nimport api from \"./../../API\";\r\nimport AppBar from './AppBar';\r\nimport DragUploadModal from './DragUploadModal';\r\nimport { InView } from 'react-intersection-observer';\r\nimport { scrollToBottom, sortMessages } from \"Modules/Utils\";\r\nimport { Attachment } from \"@material-ui/icons\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nexport interface FilePayloadData {\r\n    data: string,\r\n    size: number,\r\n    name: string\r\n}\r\ninterface IProps {\r\n    chat: I.IChatPaged | null;\r\n    hash: string;\r\n    addTemporaryMessage: (message: I.IAnyMessage) => void;\r\n    temporaryMessages: I.IAnyMessage[];\r\n}\r\n\r\n\r\ninterface IState {\r\n    form: {\r\n        textMessage: string;\r\n        files: FilePayloadData[]\r\n    };\r\n    highlight: boolean;\r\n}\r\n\r\nconst getKeyFromMessage = (msg: I.IMessage) => {\r\n    return `${msg.uuid}-${msg.senderId}-${msg.date}-${msg.date}-${msg.id || 'xd'}`;\r\n}\r\n\r\nconst isThisFirstDateOccurence = (pages: I.IPage[], message: I.IMessage) => {\r\n    const dateToCheck = moment(message.date).format('dddd, MMMM Do YYYY')\r\n\r\n    const allMessages = pages.map(page => page.messages).flat();\r\n\r\n    const messageIndex = allMessages.indexOf(message);\r\n\r\n    const listOfDates = allMessages.map(msg => moment(msg.date).format('dddd, MMMM Do YYYY'));\r\n\r\n    return listOfDates.indexOf(dateToCheck) === messageIndex;\r\n}\r\n\r\nlet isLoading = false;\r\n\r\nexport default class Chat extends Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            form: {\r\n                textMessage: \"\",\r\n                files: []\r\n            },\r\n            highlight: false\r\n        };\r\n    }\r\n\r\n    allow = (e: React.DragEvent<HTMLDivElement>) => {\r\n\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n    }\r\n\r\n    whileOver = (evt: React.DragEvent<HTMLDivElement>) => {\r\n        let highlight = false;\r\n        if (evt.type === \"dragenter\" || evt.type === \"dragover\") {\r\n            highlight = true;\r\n        }\r\n        if (this.state.highlight !== highlight) {\r\n            this.setState({ highlight })\r\n        }\r\n    }\r\n\r\n    drop = (evt: React.DragEvent<HTMLDivElement>) => {\r\n        evt.preventDefault();\r\n        if (evt.dataTransfer)\r\n            this.handleFiles(evt.dataTransfer.files);\r\n\r\n        this.setState({ highlight: false });\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        Loaf.on(\"chatPage\", () => {\r\n            setTimeout(() => {\r\n                scrollToBottom(62);\r\n                isLoading = false;\r\n            }, 0);\r\n        });\r\n    }\r\n\r\n    public handleFiles = (files: FileList | null) => {\r\n        if (!files || !files.length) return;\r\n        const filesToSend: FilePayloadData[] = [];\r\n\r\n        const readFile = (index: number, file?: File) => {\r\n            /*if(file && !file.type?.startsWith(\"image/\")){\r\n                return;\r\n            }*/\r\n            if (!file) {\r\n                return this.setFiles(filesToSend);\r\n                /*return this.setState(state => {\r\n                    state.form.images = images;\r\n                    return state;\r\n                }, () => console.log(this.state));*/\r\n            }\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(file);\r\n            reader.onload = () => {\r\n                if (typeof reader.result !== \"string\") {\r\n                    return readFile(index + 1, files[index + 1]);;\r\n                }\r\n                const img = reader.result;\r\n\r\n                filesToSend.push({\r\n                    data: img,\r\n                    name: file.name,\r\n                    size: file.size,\r\n                });\r\n                return readFile(index + 1, files[index + 1]);\r\n            }\r\n        }\r\n\r\n        readFile(0, files[0]);\r\n    }\r\n\r\n    getAllMessagesCount = () => {\r\n        const { chat } = this.props;\r\n        if (!chat) return 0;\r\n        const allMessagesCount = chat.pages.map(page => page.messages.length).reduce((a, b) => a + b, 0);\r\n        return allMessagesCount;\r\n    }\r\n\r\n    public loadMoreMessages = (page: number) => {\r\n        const { chat } = this.props;\r\n        if (!chat || chat.status !== 2) {\r\n            return;\r\n        }\r\n        api.chats.loadPageOfMessages(chat.id, page);\r\n    }\r\n\r\n    public loadMoreByScroll = (page: number) => (_inView: boolean, entry: IntersectionObserverEntry) => {\r\n        if (isLoading) return;\r\n        if (!entry || entry.intersectionRatio < 0.98) return;\r\n        isLoading = true;\r\n        this.loadMoreMessages(page);\r\n    }\r\n\r\n    public render() {\r\n        const { chat, temporaryMessages } = this.props;\r\n        if (!chat) {\r\n            return <div className={`chat_container empty`}></div>;\r\n        }\r\n        const minimumPage = Math.min(...chat.pages.map(page => page.page));\r\n\r\n        const messages: I.IAnyMessage[] = sortMessages([...chat.pages.map(page => page.messages).flat(), ...temporaryMessages]);\r\n\r\n        return (\r\n            <div className=\"chat_container\">\r\n                <AppBar chat={chat} />\r\n                <div id=\"message_container\" className={`message_container ${this.state.highlight ? 'highlight-drag' : ''} ${this.state.form.files.length ? 'upload' : ''}`}\r\n                    onDragOver={this.allow}\r\n                    onDragEnter={this.whileOver}\r\n                    onDragOverCapture={this.whileOver}\r\n                    onDragEnd={this.whileOver}\r\n                    onDragLeave={this.whileOver}\r\n                    onDrop={this.drop}\r\n                >\r\n                    {chat.status === 1 || !this.getAllMessagesCount() ?\r\n                        <Announcement\r\n                            request={chat.status === 1}\r\n                            chat={chat}\r\n                        /> : null}\r\n                    {\r\n                        chat.status === 2 ? (\r\n                            <>\r\n                                {\r\n                                    minimumPage > 0 ? (\r\n                                        <InView threshold={0} trackVisibility={true} delay={100} as=\"div\" className=\"load-messages-button\" onClick={() => this.loadMoreMessages(minimumPage - 1)} onChange={this.loadMoreByScroll(minimumPage - 1)}>\r\n                                            LOAD MORE MESSAGES\r\n                                        </InView>\r\n                                    ) : null\r\n                                }\r\n                                {\r\n                                    messages.map(message => (\r\n                                        <React.Fragment key={getKeyFromMessage(message)}>\r\n                                            {\r\n                                                isThisFirstDateOccurence(chat.pages, message) ? (\r\n                                                    <div className=\"date-tag\">{moment(message.date).format('dddd, MMMM Do YYYY')}</div>\r\n                                                ) : null\r\n                                            }\r\n                                            <Message message={message} />\r\n                                        </React.Fragment>\r\n                                    ))\r\n                                }\r\n                            </>\r\n                        ) : null\r\n                    }\r\n                </div>\r\n                <DragUploadModal\r\n                    images={this.state.form.files}\r\n                    setFiles={this.setFiles}\r\n                    sendFiles={this.sendFiles}\r\n                />\r\n                {chat.status === 2 ? <div className=\"text_sender\">\r\n                    <TextField\r\n                        onChange={this.handleChange}\r\n                        name=\"textMessage\"\r\n                        onKeyDown={this.handleKeyDown}\r\n                        id=\"full-width\"\r\n                        placeholder=\"Type in a message...\"\r\n                        fullWidth\r\n                        value={this.state.form.textMessage}\r\n                        variant=\"outlined\"\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                        InputProps={{\r\n                            classes: {\r\n                                root: 'outline-container'\r\n                            }\r\n                        }}\r\n                        inputProps={{\r\n                            style: { color: 'white' }\r\n                        }}\r\n                    />\r\n                    <div className=\"add_attachment_button\">\r\n                        <label htmlFor=\"attachment\"><Attachment fontSize={'large'} htmlColor=\"white\" /></label>\r\n                        <input id=\"attachment\" type=\"file\" style={{ display: 'none' }} onChange={e => this.handleFiles(e.target.files)} />\r\n                    </div>\r\n                </div> : null}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private setFiles = (files: FilePayloadData[]) => {\r\n        this.setState(state => {\r\n            state.form.files = files;\r\n            return state;\r\n        });\r\n    }\r\n\r\n    private handleKeyDown = (e: any) => {\r\n        if (e.key === \"Enter\" && this.state.form.textMessage && this.props.chat) {\r\n            // TODO: SEND MESSAGE\r\n            const content = this.state.form.textMessage;\r\n            this.sendMessages(this.props.chat.id, { type: \"text\", content });\r\n        }\r\n    }\r\n    private addTemporaryMessage = (chatId: number, message: I.IMessageContent, localUUID: string) => {\r\n        const newTemporaryMessage: I.IAnyMessage = {\r\n            uuid: localUUID,\r\n            chatId,\r\n            id: (new Date()).getTime(),\r\n            senderId: -1,\r\n            content: message,\r\n            my: true,\r\n            date: (new Date()).toISOString(),\r\n            temporary: true\r\n        }\r\n\r\n        this.props.addTemporaryMessage(newTemporaryMessage);\r\n    }\r\n    private sendMessages = async (chatId: number, message: I.IMessageContent) => {\r\n        const uuid = uuidv4();\r\n        this.setState({ form: { textMessage: \"\", files: [] } }, () => {\r\n            this.addTemporaryMessage(chatId, message, uuid);\r\n        });\r\n        api.message.send(chatId, message, uuid);\r\n    }\r\n    private sendFiles = () => {\r\n        const files = this.state.form.files;\r\n        if (!files.length || !this.props.chat) {\r\n            return console.log(\"NO files OR NO CHAT\");\r\n        }\r\n        if (files.length === 1) {\r\n            const file = this.state.form.files[0];\r\n            const message: I.IMessageContent = {\r\n                type: \"file\",\r\n                content: file\r\n            };\r\n            this.sendMessages(this.props.chat.id, message);\r\n        } else {\r\n            const message: I.IMessageContentMixed = {\r\n                type: \"mixed\",\r\n                content: []\r\n            }\r\n            for (const file of files) {\r\n                const filePayload: I.IMessageContentFile = {\r\n                    type: \"file\",\r\n                    content: file\r\n                }\r\n                message.content.push(filePayload);\r\n            }\r\n            this.sendMessages(this.props.chat.id, message);\r\n        }\r\n    }\r\n    private handleChange = (e: any) => {\r\n        const { form } = this.state;\r\n        const field: \"textMessage\" = e.target.name;\r\n        form[field] = e.target.value;\r\n        this.setState({ form });\r\n    }\r\n}\r\n\r\n","import { Divider, ListItem, ListItemText } from \"@material-ui/core\";\r\nimport { getLast } from \"Modules/Utils\";\r\nimport moment from \"moment\";\r\nimport React, { Component } from \"react\";\r\n// import * as API from \"./api\";\r\nimport * as I from \"./../../../modules/interface\";\r\nimport LoafAvatar from \"./../../Theme/Components/Avatar\";\r\n\r\nconst getLastTag = (chat: I.IChatPaged, last: I.IMessage | null) => {\r\n    if(!last) return null;\r\n    if(!last.my && chat.private) return '';\r\n    if(last.my){\r\n        return <span className=\"you\">You:</span>;\r\n    }\r\n    return <span className=\"you\">{last.sender?.username || last.senderId}:</span>\r\n}\r\n\r\nfunction getSubText(chat: I.IChatPaged, last: I.IMessage | null) {\r\n    switch (chat.status) {\r\n        case 5:\r\n            return \"Waiting for response...\";\r\n        case 2:\r\n            if(last?.content.type === \"file\" || last?.content.type === \"mixed\") return \"sent an image\";\r\n            return last?.content.content || \"No messages\";\r\n        case 1:\r\n            return <span className=\"strong\">requested your attention</span>;\r\n        default:\r\n            return \"\";\r\n    }\r\n}\r\n\r\ninterface IProps {\r\n    chat: I.IChatPaged;\r\n    chatImage: string | null;\r\n    loadChat: (chat: I.IChatPaged) => void;\r\n    isCurrent: boolean;\r\n}\r\n\r\nexport default class ChatsListEntry extends Component<IProps> {\r\n    public render() {\r\n        const { chat, isCurrent } = this.props;\r\n        const last = getLast(chat);\r\n        return (\r\n            <div className={`chat-list-entry ${isCurrent ? 'current' : ''}`}>\r\n                <ListItem button\r\n                    className={\"chat-button \" + (chat.unread ? \"new-message\" : \"\")}\r\n                    onClick={() => this.props.loadChat(chat)}\r\n                >\r\n                    <LoafAvatar chat={chat} />\r\n                    <ListItemText inset\r\n                        className=\"text-item\"\r\n                        primary={\r\n                            <div className={\"chat-name\"}>\r\n                                <div className=\"chat-name-text\">{chat.name}</div>\r\n                                <div className=\"last-message-date\">\r\n                                    {last ? moment(last.date).fromNow() : \"\"}\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                        secondary={\r\n                            <div className=\"chat-last-message\">\r\n                                <div className=\"text\">\r\n                                    {getLastTag(chat, last)} {getSubText(chat, last)}\r\n                                </div>\r\n                                <div className={\"last-text-status \" /*+ (chat.lastYours ? chat.status : '')*/}></div>\r\n                            </div>\r\n                        }\r\n                    />\r\n                </ListItem>\r\n                <li>\r\n                    <Divider variant=\"inset\" className=\"separator\" />\r\n                </li>\r\n            </div>);\r\n    }\r\n}\r\n","import { List } from \"@material-ui/core\";\r\nimport React, { Component } from \"react\";\r\nimport * as I from \"./../../../modules/interface\";\r\nimport ChatsListEntry from \"./ChatsListEntry\";\r\n// import moment from \"moment\";\r\nimport storage from './../../API/ChatImages';\r\n\r\n\r\ninterface IProps {\r\n    chats: I.IChatPaged[];\r\n    currentChat: I.IChatPaged | null;\r\n    loadChat: (chat: I.IChatPaged) => void;\r\n}\r\n\r\n\r\nexport default class ChatsList extends Component<IProps> {\r\n    public render() {\r\n        const { chats } = this.props;\r\n        return <div className=\"chat-list\">\r\n            <List>\r\n                {chats.map((chat) => <ChatsListEntry\r\n                    key={chat.id}\r\n                    chat={chat}\r\n                    chatImage={storage.get(chat.id)}\r\n                    loadChat={this.props.loadChat}\r\n                    isCurrent={this.props.currentChat?.id === chat.id}\r\n                />)}\r\n            </List>\r\n        </div>;\r\n    }\r\n}\r\n","import { Button } from \"@material-ui/core\";\r\nimport React, { Component } from \"react\";\r\n\r\ninterface IProps  {\r\n    secondary?: boolean;\r\n    main?: boolean;\r\n    big?: boolean;\r\n    onClick?: () => void;\r\n    style?: any;\r\n}\r\n\r\nexport default class LoafButton extends Component<IProps> {\r\n    public render() {\r\n        const { main, big, onClick, secondary, ...rest } = this.props;\r\n        return (\r\n            <Button variant={main ? \"contained\" : \"text\"}\r\n                onClick={onClick}\r\n                disableElevation\r\n                className={big ? \"big-button\" : \"\"}\r\n                color={secondary ? \"secondary\" : \"primary\"}\r\n                {...rest}\r\n                >\r\n                {this.props.children}\r\n            </Button>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Paper, DialogTitle, DialogContent, DialogActions, TextField, InputAdornment } from '@material-ui/core';\r\nimport Button from \"./../../Theme/Components/LoafButton\";\r\nimport * as Loaf from \"./../../API/Loaf\";\r\nimport api from \"../../API\";\r\n//import { MoveToInbox, Mail, Group, Settings, GroupAdd, PersonAdd, Cancel, ContactSupport, PermMedia } from '@material-ui/icons';\r\n\r\ninterface IProps {\r\n    onClose: () => void;\r\n    closeDrawer: () => void;\r\n}\r\n\r\ninterface IState {\r\n    name: string;\r\n    loading: boolean;\r\n}\r\nexport default class NewContact extends Component<IProps, IState> {\r\n    constructor(props: IProps){\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            loading: false\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        Loaf.on(\"userAdded\", (data: boolean) => {\r\n            this.setState({loading: false}, () => {\r\n                if(!data) return;\r\n                this.props.onClose();\r\n                this.props.closeDrawer();\r\n            })\r\n        })\r\n    }\r\n\r\n    onChange = (ev: any) => {\r\n        this.setState({name: ev.target.value});\r\n    }\r\n\r\n    addContact = () => {\r\n        if(!this.state.loading) this.setState({loading: true}, () => api.user.add(this.state.name));\r\n    }\r\n\r\n    render(){\r\n        return(\r\n          <Paper classes={{root:\"modal-container\"}}>\r\n              <DialogTitle style={{color:'white'}}>Adding contact</DialogTitle>\r\n              <DialogContent>\r\n                  <TextField\r\n                    style={{width:'100%'}}\r\n                    className=\"text-field-container\"\r\n                    value={this.state.name}\r\n                    onChange={this.onChange}\r\n                    disabled={this.state.loading}\r\n                    placeholder=\"Username\"\r\n                    InputProps={{\r\n                        className:'contact-input',\r\n                        style:{color:'#fff'},\r\n                        startAdornment: <InputAdornment position=\"start\" className=\"new-contact-adornment\">@</InputAdornment>\r\n                    }}\r\n                  />\r\n              </DialogContent>\r\n              <DialogActions>\r\n                  <Button main big onClick={this.addContact}>Add</Button>\r\n                  <Button big onClick={this.props.onClose}>Cancel</Button>\r\n              </DialogActions>\r\n          </Paper>);\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Paper, DialogTitle, DialogContent, DialogActions, TextField, List, ListItem, ListItemAvatar, Avatar, ListItemText, ListItemSecondaryAction, IconButton } from '@material-ui/core';\r\nimport Button from \"./../../Theme/Components/LoafButton\";\r\nimport * as Loaf from \"./../../API/Loaf\";\r\nimport api from \"../../API\";\r\nimport * as I from \"./../../../modules/interface\";\r\nimport LoafAvatar from \"./../../Theme/Components/Avatar\";\r\nimport { Remove as RemoveIcon, Add as AddIcon } from '@material-ui/icons';\r\n\r\ninterface IProps {\r\n    onClose: () => void;\r\n    closeDrawer: () => void;\r\n    chats: I.IChatPaged[];\r\n}\r\n\r\ninterface IState {\r\n    name: string;\r\n    loading: boolean;\r\n    selectedChats: number[];\r\n}\r\nexport default class NewConversation extends Component<IProps, IState> {\r\n    constructor(props: IProps){\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            loading: false,\r\n            selectedChats: [],\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        Loaf.on(\"createdChat\", (data: boolean) => {\r\n            this.setState({loading: false}, () => {\r\n                if(!data) return;\r\n                this.props.onClose();\r\n                this.props.closeDrawer();\r\n            })\r\n        })\r\n    }\r\n\r\n    onChange = (ev: any) => {\r\n        this.setState({name: ev.target.value});\r\n    }\r\n\r\n    toggleChatEntry = (chatId: number) => () => {\r\n        let selectedChats = this.state.selectedChats;\r\n        if(selectedChats.includes(chatId)){\r\n            selectedChats = selectedChats.filter(id => id !== chatId);\r\n        } else {\r\n            selectedChats.push(chatId);\r\n        }\r\n        this.setState({selectedChats})\r\n    }\r\n\r\n    createConversation = () => {\r\n        const { name, selectedChats } = this.state;\r\n        const userIds: number[] = [];\r\n        const chats = this.props.chats.filter(chat => selectedChats.includes(chat.id)).map(chat => chat.users).flat().map(user => user.id);\r\n        for(const userId of chats){\r\n            if(!userId) continue;\r\n            if(!userIds.includes(userId)) userIds.push(userId);\r\n        }\r\n        if(!this.state.loading) this.setState({loading: true}, () => api.chats.createGroup(name, userIds));\r\n    }\r\n\r\n    render(){\r\n        const { chats } = this.props;\r\n        const { selectedChats } = this.state;\r\n        return(\r\n          <Paper classes={{root:\"modal-container new-conversation\"}}>\r\n              <DialogTitle style={{color:'white'}}>Create group</DialogTitle>\r\n              <DialogContent>\r\n                  <TextField\r\n                    style={{width:'100%'}}\r\n                    className=\"text-field-container\"\r\n                    value={this.state.name}\r\n                    onChange={this.onChange}\r\n                    disabled={this.state.loading}\r\n                    placeholder=\"Group name\"\r\n                    InputProps={{\r\n                        className:'contact-input',\r\n                        style:{color:'#fff'},\r\n                    }}\r\n                />\r\n                <List dense={true}>\r\n                    {chats.filter(chat => chat.private).map(chat => <ListItem className={`new-conversation-entry ${selectedChats.includes(chat.id) ? 'selected':''}`}>\r\n                        <ListItemAvatar>\r\n                            <Avatar>\r\n                                <LoafAvatar chat={chat}  />\r\n                            </Avatar>\r\n                        </ListItemAvatar>\r\n                        <ListItemText\r\n                            primary={<div className=\"visible-name\">{chat.name}</div>}\r\n                            secondary={<div className=\"main-identifier\">{`@${chat.name}`}</div>}\r\n                        />\r\n                        <ListItemSecondaryAction>\r\n                            <IconButton edge=\"end\" aria-label=\"delete\">\r\n                                {selectedChats.includes(chat.id) ? <RemoveIcon  onClick={this.toggleChatEntry(chat.id)}/> : <AddIcon  onClick={this.toggleChatEntry(chat.id)}/>}\r\n                            </IconButton>\r\n                        </ListItemSecondaryAction>\r\n                    </ListItem>)}\r\n                    </List>\r\n              </DialogContent>\r\n              <DialogActions>\r\n                  <Button main big onClick={this.createConversation}>Add</Button>\r\n                  <Button big onClick={this.props.onClose}>Cancel</Button>\r\n              </DialogActions>\r\n          </Paper>);\r\n    }\r\n}","import { AppBar, SwipeableDrawer, IconButton, Toolbar, Typography, Modal } from \"@material-ui/core\";\r\nimport { Menu as MenuIcon, Search as SearchIcon } from \"@material-ui/icons\";\r\nimport DrawerContent from \"./../Drawer\";\r\nimport React, { Component } from \"react\";\r\nimport * as I from \"../../../modules/interface\";\r\nimport api from \"./../../API\";\r\nimport * as Loaf from \"./../../API/Loaf\";\r\nimport logo from \"./../../Theme/assets/load_icon.svg\";\r\nimport Chat from \"./../Chat/Chat\";\r\nimport ChatList from \"./../Chat/ChatsList\";\r\nimport NewContact from \"./../NewContact\";\r\nimport NewConversation from \"./../NewConversation\";\r\nimport storage, {ChatImageStorage} from \"./../../API/ChatImages\";\r\nimport { getLast, scrollToBottom, sortChats } from \"Modules/Utils\";\r\n\r\ninterface IState {\r\n    drawer: boolean;\r\n    chats: I.IChatPaged[];\r\n    currentChat: I.IChatPaged | null;\r\n    newContactModal: boolean;\r\n    newConversationModal: boolean;\r\n    storage: ChatImageStorage;\r\n    hash: string,\r\n    temporaryMessages: I.IAnyMessage[]\r\n}\r\n\r\nconst addPageToChat = (chat: I.IChatPaged, pages: I.IPage[]) => {\r\n    for(const page of pages){\r\n        const existingEntry = chat.pages.find(pageEntry => pageEntry.page === page.page);\r\n        if(!existingEntry){\r\n            chat.pages.push(page);\r\n            continue;\r\n        }\r\n        existingEntry.messages = page.messages;\r\n    }\r\n}\r\n\r\nconst didLastPageChange = (chat: I.IChatPaged, newPages: I.IPage[]) => {\r\n    const maxNewPage = Math.max(...newPages.map(page => page.page));\r\n    const maxOldPage = Math.max(...chat.pages.map(page => page.page));\r\n\r\n    if(maxOldPage > maxNewPage){\r\n        return false;\r\n    }\r\n\r\n    const newMaxPageEntry = newPages.find(page => page.page === maxNewPage) as I.IPage;\r\n    const lastPageEntry = chat.pages.find(page => page.page === maxNewPage);\r\n\r\n    if(!lastPageEntry){\r\n        return true;\r\n    }\r\n\r\n    if(newMaxPageEntry.messages.length !== lastPageEntry.messages.length) return true;\r\n\r\n    const currentUUIDs = lastPageEntry.messages.map(message => message.uuid);\r\n    const newUUIDs = newMaxPageEntry.messages.map(message => message.uuid);\r\n\r\n    for(const currentUUID of currentUUIDs){\r\n        if(!newUUIDs.includes(currentUUID)){\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nexport default class Main extends Component<{}, IState> {\r\n    constructor(props: {}) {\r\n        super(props);\r\n        this.state = {\r\n            chats: [],\r\n            currentChat: null,\r\n            drawer: false,\r\n            newContactModal: false,\r\n            newConversationModal: false,\r\n            storage: storage.set(() => this.setState({hash: (new Date()).toISOString()})),\r\n            hash: '',\r\n            temporaryMessages: []\r\n        };\r\n    }\r\n    public async componentDidMount() {\r\n        Loaf.on(\"chats\", (newChats: I.IChatPaged[], localUUID?: string) => {\r\n            const { currentChat, chats } = this.state;\r\n\r\n            let newInCurrent = false;\r\n\r\n            if(currentChat){\r\n                const newCurrentChat = newChats.find(chat => chat.id === currentChat.id);\r\n                if(newCurrentChat){\r\n                    newInCurrent = didLastPageChange(currentChat, newCurrentChat.pages);\r\n                    addPageToChat(currentChat, newCurrentChat.pages);\r\n                }\r\n                const indexOfCurrentChat = newChats.findIndex(chat => chat.id === currentChat.id);\r\n                if(indexOfCurrentChat >= 0){\r\n                    newChats[indexOfCurrentChat] = currentChat;\r\n                }\r\n            }\r\n            this.setState({\r\n                chats: sortChats(newChats),\r\n                currentChat,\r\n                temporaryMessages: this.state.temporaryMessages.filter(msg => !localUUID || msg.uuid !== localUUID)\r\n            }, () => {\r\n                if(!newInCurrent && !localUUID) return;\r\n                scrollToBottom();\r\n            });\r\n        });\r\n\r\n        Loaf.on(\"clearPages\", () => {\r\n            this.loadChat(null);\r\n            const { chats } = this.state;\r\n\r\n            chats.map(chat => {\r\n                if(chat.pages.length === 0) return chat;\r\n                const maxPage = Math.max(...chat.pages.map(page => page.page));\r\n                const lastPage = chat.pages.find(page => page.page === maxPage);\r\n                if(!lastPage) return chat;\r\n                chat.pages = [lastPage];\r\n                return chat;\r\n            })\r\n            this.setState({ chats: sortChats(chats) });\r\n        })\r\n\r\n        Loaf.on(\"chatPage\", (chatPage: { chatId: number, pageEntry: I.IPage }) => {\r\n            const { chats, currentChat } = this.state;\r\n            const targetChat = chats.find(chat => chat.id === chatPage.chatId);\r\n\r\n            let newInCurrent = false;\r\n\r\n            if(!targetChat) return;\r\n\r\n            if(!currentChat || currentChat.id !== targetChat.id){\r\n                targetChat.pages = [chatPage.pageEntry];\r\n            } else {\r\n                newInCurrent = didLastPageChange(currentChat, [chatPage.pageEntry]);\r\n                addPageToChat(currentChat, [chatPage.pageEntry]);\r\n                currentChat.pages.sort((a,b) => a.page-b.page);\r\n            }\r\n\r\n            this.setState({\r\n                chats: sortChats(chats),\r\n                currentChat\r\n            }, () => {\r\n                if(!newInCurrent) return;\r\n                scrollToBottom();\r\n            });\r\n        });\r\n        api.chats.get();\r\n    }\r\n    public setContactModal = (state: boolean) => () => {\r\n        this.setState({newContactModal: state});\r\n    }\r\n    public setConversationModal = (state: boolean) => () => {\r\n        this.setState({newConversationModal: state});\r\n    }\r\n    public toggleDrawer = () => {\r\n        this.setState((state) => ({ ...state, drawer: !state.drawer }));\r\n    }\r\n    addTemporaryMessage = (temporaryMessage: I.IAnyMessage) => {\r\n        this.setState({ temporaryMessages: [...this.state.temporaryMessages, temporaryMessage]}, scrollToBottom);\r\n    }\r\n    public render() {\r\n        const { chats, temporaryMessages, hash, currentChat } = this.state;\r\n        return (\r\n            <div className=\"loaf-app\">\r\n                <AppBar position=\"fixed\" style={{top:'20px'}} >\r\n                    <Toolbar className=\"bar\">\r\n                        <IconButton className=\"menuButton\" color=\"inherit\" aria-label=\"Open drawer\"  onClick={this.toggleDrawer}>\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\" color=\"inherit\" noWrap className=\"logo-wrapper\">\r\n                            <img src={logo} alt={'Loaf'} />\r\n                        </Typography>\r\n                        <div className=\"searchIcon\">\r\n                            <SearchIcon />\r\n                        </div>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <SwipeableDrawer\r\n                    open={this.state.drawer}\r\n                    onOpen={this.toggleDrawer}\r\n                    onClose={this.toggleDrawer}\r\n                    className=\"sidenav-container\"\r\n                    classes={{paper:'drawer-content'}}\r\n                >\r\n                    <DrawerContent\r\n                        newContact={this.setContactModal(true)}\r\n                        newConversation={this.setConversationModal(true)}\r\n                    />\r\n                </SwipeableDrawer>\r\n                <Modal\r\n                    open={this.state.newContactModal}\r\n                    onClose={this.setContactModal(false)}\r\n                    >\r\n                    <NewContact onClose={this.setContactModal(false)} closeDrawer={this.toggleDrawer}/>\r\n                </Modal>\r\n                <Modal\r\n                    open={this.state.newConversationModal}\r\n                    onClose={this.setConversationModal(false)}\r\n                    >\r\n                    <NewConversation\r\n                        onClose={this.setConversationModal(false)}\r\n                        closeDrawer={this.toggleDrawer}\r\n                        chats={chats}\r\n                    />\r\n                </Modal>\r\n                <div className=\"playground\">\r\n                    <ChatList\r\n                        chats={chats}\r\n                        currentChat={currentChat}\r\n                        loadChat={this.loadChat}\r\n                    />\r\n                    <Chat chat={currentChat} temporaryMessages={temporaryMessages.filter(msg => currentChat && msg.chatId === currentChat.id)}  hash={hash} addTemporaryMessage={this.addTemporaryMessage} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    private loadChat = (chat: I.IChatPaged | null) => {\r\n        this.setState({ currentChat: chat }, () => {\r\n            setTimeout(() => {\r\n                const container = document.getElementById(\"message_container\");\r\n                if(!container) return;\r\n                container.scroll({ top: container.scrollHeight });\r\n            }, 17);\r\n        });\r\n    }\r\n}\r\n","import { TextField } from \"@material-ui/core\";\r\nimport API from \"API\";\r\nimport React, { Component } from \"react\";\r\nimport LoafButton from \"Theme/Components/LoafButton\";\r\n\r\ninterface IProps {\r\n    authentication?: boolean;\r\n    togglePage: () => void;\r\n}\r\n\r\ninterface IState {\r\n    username: string;\r\n    password: string;\r\n    authCode: number;\r\n}\r\n\r\nexport default class Login extends Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            authCode: 0,\r\n            password: \"\",\r\n            username: \"\",\r\n        };\r\n    }\r\n\r\n    keyPress = (event: any) => {\r\n        if(event.key === \"Enter\"){\r\n            this.logIn();\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        if (this.props.authentication) {\r\n            return (\r\n                <div className=\"loaf-app-splash\">\r\n                    <div id=\"login-page\">\r\n                        <TextField\r\n                            type=\"number\"\r\n                            className=\"username-input\"\r\n                            placeholder=\"Username\"\r\n                            color=\"primary\"\r\n                            value={this.state.authCode}\r\n                            onChange={this.handleChange(\"authCode\")}\r\n                            required\r\n                        />\r\n                        <LoafButton main big onClick={this.validate}>Authenticate</LoafButton>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        return (\r\n            <div className=\"loaf-app-splash\">\r\n                <div id=\"login-page\">\r\n                    <TextField\r\n                        className=\"username-input\"\r\n                        placeholder=\"Username\"\r\n                        color=\"primary\"\r\n                        value={this.state.username}\r\n                        onKeyPress={this.keyPress}\r\n                        onChange={this.handleChange(\"username\")}\r\n                        required\r\n                    />\r\n                    <TextField\r\n                        className=\"password-input\"\r\n                        placeholder=\"Password\"\r\n                        required\r\n                        onKeyPress={this.keyPress}\r\n                        value={this.state.password}\r\n                        onChange={this.handleChange(\"password\")}\r\n                        type=\"password\"\r\n                    />\r\n                    <LoafButton main big onClick={this.logIn}>Login</LoafButton>\r\n                    <LoafButton big onClick={this.props.togglePage}>Sign Up</LoafButton>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private handleChange = (field: \"password\" | \"username\" | \"authCode\") => (e: any) => {\r\n        const value = e.target.value;\r\n        this.setState((state) => ({ ...state, [field]: value }));\r\n    }\r\n\r\n    private logIn = () => {\r\n        API.user.logIn(this.state.username, this.state.password);\r\n    }\r\n\r\n    private validate = () => {\r\n        API.user.authenticate(this.state.authCode);\r\n    }\r\n}\r\n","import { Backdrop, CircularProgress, TextField } from \"@material-ui/core\";\r\nimport API from \"API\";\r\nimport QRCode from \"qrcode\";\r\nimport React, { Component } from \"react\";\r\nimport LoafButton from \"Theme/Components/LoafButton\";\r\nimport * as Loaf from \"./../../API/Loaf\";\r\n\r\ninterface IProps {\r\n    togglePage: () => void;\r\n}\r\n\r\ninterface IState {\r\n    username: string;\r\n    password: string;\r\n    firstName: string;\r\n    loading: boolean;\r\n    done: boolean;\r\n    qrcode: string | null;\r\n}\r\n\r\nexport default class Register extends Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            done: false,\r\n            firstName: \"\",\r\n            loading: false,\r\n            password: \"\",\r\n            qrcode: null,\r\n            username: \"\",\r\n        };\r\n    }\r\n\r\n    public componentDidMount() {\r\n        Loaf.on(\"userCreated\", async (qrcode: string | false) => {\r\n            if (!qrcode) {\r\n                this.setState({ done: true, loading: false });\r\n                return;\r\n            }\r\n            const url = await QRCode.toDataURL(`otpauth://totp/Loaf%20Messenger?secret=${qrcode}`);\r\n\r\n            this.setState({ done: true, loading: false, qrcode: url });\r\n\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"loaf-app-splash\">\r\n                <div id=\"login-page\">\r\n                    {this.renderError()}\r\n                    {this.renderForm()}\r\n                    <LoafButton big onClick={this.props.togglePage}>Sign In</LoafButton>\r\n                </div>\r\n                <Backdrop id=\"splash-backdrop\" open={this.state.loading}>\r\n                    <CircularProgress color=\"inherit\" />\r\n                </Backdrop>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private renderError = () => {\r\n        const { done, loading, qrcode } = this.state;\r\n        if (done && !loading && !qrcode) {\r\n            return <p>There was some error along the way - try again</p>;\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    private renderForm = () => {\r\n        if (this.state.qrcode) {\r\n            return <img src={this.state.qrcode} alt=\"TOTP\" />;\r\n        }\r\n        return <React.Fragment>\r\n            <TextField\r\n                className=\"firstname-input\"\r\n                placeholder=\"First Name\"\r\n                color=\"primary\"\r\n                value={this.state.firstName}\r\n                onChange={this.handleChange(\"firstName\")}\r\n                required\r\n                disabled={this.state.loading}\r\n            />\r\n            <TextField\r\n                className=\"username-input\"\r\n                placeholder=\"Username\"\r\n                color=\"primary\"\r\n                value={this.state.username}\r\n                onChange={this.handleChange(\"username\")}\r\n                required\r\n                disabled={this.state.loading}\r\n            />\r\n            <TextField\r\n                className=\"password-input\"\r\n                placeholder=\"Password\"\r\n                required\r\n                value={this.state.password}\r\n                onChange={this.handleChange(\"password\")}\r\n                type=\"password\"\r\n                disabled={this.state.loading}\r\n            />\r\n            <LoafButton main big onClick={this.register} style={{marginTop:'24px'}}>Register</LoafButton>\r\n        </React.Fragment>;\r\n    }\r\n\r\n    private handleChange = (field: \"password\" | \"username\" | \"firstName\") => (e: any) => {\r\n        const value = e.target.value;\r\n        this.setState((state) => ({ ...state, [field]: value }));\r\n    }\r\n\r\n    private register = () => {\r\n        if (this.state.loading) {\r\n            return;\r\n        }\r\n        this.setState({ loading: true}, () => {\r\n            API.user.register(this.state.username, this.state.password, this.state.firstName);\r\n        });\r\n    }\r\n}\r\n","import { LinearProgress } from \"@material-ui/core\";\r\nimport React, { Component } from \"react\";\r\nimport \"./style.css\";\r\n\r\nexport default class SplashScreen extends Component {\r\n    public render() {\r\n        return (\r\n            <div className=\"loaf-app-splash\">\r\n                <div className=\"progress-container\">\r\n                    <LinearProgress />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport Main from \"./Modules/Main\";\r\nimport * as I from \"./../modules/interface\";\r\nimport api from \"./API\";\r\nimport * as Loaf from \"./API/Loaf\";\r\nimport Login from \"./Modules/Login\";\r\nimport Register from \"./Modules/Register\";\r\nimport Splash from \"./Modules/Splash\";\r\nimport { UserContext } from \"Context\";\r\n\r\ninterface IState {\r\n    user: I.IUser | null;\r\n    loading: boolean;\r\n    authentication: boolean;\r\n    register: boolean;\r\n}\r\n\r\nexport default class App extends React.Component<any, IState> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            authentication: false,\r\n            loading: true,\r\n            register: false,\r\n            user: null,\r\n        };\r\n    }\r\n\r\n    public componentDidMount() {\r\n        Loaf.on(\"user\", (user: I.IUser) => {\r\n            this.setState({user, loading: false});\r\n        });\r\n        Loaf.on(\"userStatus\", (status: number) => {\r\n            if (status === 200) {\r\n                this.getUser();\r\n            } else if (status === 403) {\r\n                this.setState({authentication: true});\r\n            }\r\n        });\r\n\r\n        this.getUser();\r\n    }\r\n    public render() {\r\n        const { user, loading, authentication, register } = this.state;\r\n\r\n        let window = <Splash />\r\n        if (loading) {\r\n            window = <Splash />;\r\n        } else if (user) {\r\n            window = <Main />;\r\n        }else if (register) {\r\n            window = <Register togglePage={this.togglePage} />;\r\n        } else window = <Login togglePage={this.togglePage} authentication={authentication}/>;\r\n\r\n        return <UserContext.Provider value={user}>\r\n            {window}\r\n        </UserContext.Provider>\r\n    }\r\n\r\n    private getUser() {\r\n        const loggedInUser = api.user.get();\r\n        if (loggedInUser) {\r\n            return this.setState({ user: loggedInUser, loading: false});\r\n        }\r\n        api.user.load();\r\n    }\r\n\r\n    private togglePage = () => {\r\n        this.setState((state) => ({...state, register: !state.register}));\r\n    }\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport App from './App';\r\nimport * as Loaf from \"./API/Loaf\";\r\nimport { IAnyMessage, IChatPaged } from \"../modules/interface\";\r\n\r\ndeclare global {\r\n\tinterface Window {\r\n\t\tipcApi: {\r\n\t\t\tsend: (channel: string, ...arg: any) => void;\r\n            sendSync: (channel: string, ...arg: any) => any,\r\n\t\t\ton: (channel: string, func: (...arg: any) => void) => void;\r\n\t\t};\r\n\t}\r\n}\r\n\r\nexport default () => {\r\n    const [ error, setError ] = useState('');\r\n    const [ showError, setShowError ] = useState(false);\r\n\r\n    const minimize = () => {\r\n        window.ipcApi.send(\"min\");\r\n    }\r\n    const maximize = () => {\r\n        window.ipcApi.send(\"max\");\r\n    }\r\n    const close = () => {\r\n\t\twindow.ipcApi.send('close');\r\n    }\r\n\r\n    useEffect(() => {\r\n        Loaf.on('error-message', (error: string) => {\r\n            setError(error);\r\n            setShowError(true);\r\n            setTimeout(() => {\r\n                setShowError(false);\r\n            }, 5000);\r\n        });\r\n    }, [])\r\n\r\n    return <>\r\n        <div className=\"window-bar\">\r\n            <div className=\"window-drag-bar\"></div>\r\n            <div onClick={minimize} className=\"app-control\">_</div>\r\n            <div onClick={maximize} className=\"app-control\">O</div>\r\n            <div onClick={close} className=\"app-control close\">X</div>\r\n        </div>\r\n        <div className={`error-message ${showError ? 'show': ''}`}>\r\n            {error}\r\n        </div>\r\n        <App />\r\n    </>\r\n\r\n}\r\n/*\r\nexport default class WindowApp extends React.Component<{}, { error: string, showError: boolean}> {\r\n    constructor(props:{}){\r\n        super(props);\r\n        this.state = {\r\n            error: '',\r\n            showError: false\r\n        }\r\n    }\r\n    minimize = () => {\r\n        window.ipcApi.send(\"min\");\r\n    }\r\n    maximize = () => {\r\n        window.ipcApi.send(\"max\");\r\n    }\r\n    close = () => {\r\n\t\twindow.ipcApi.send('close');\r\n    }\r\n    componentDidMount() {\r\n        Loaf.on('error-message', (error: string) => {\r\n            this.setState({ error, showError: true });\r\n            setTimeout(() => {\r\n                this.setState({ showError: false });\r\n            }, 5000);\r\n        });\r\n    }\r\n    render(){\r\n        return <>\r\n            <div className=\"window-bar\">\r\n                <div className=\"window-drag-bar\"></div>\r\n                <div onClick={this.minimize} className=\"app-control\">_</div>\r\n                <div onClick={this.maximize} className=\"app-control\">O</div>\r\n                <div onClick={this.close} className=\"app-control close\">X</div>\r\n            </div>\r\n            <div className={`error-message ${this.state.showError ? 'show': ''}`}>\r\n                {this.state.error}\r\n            </div>\r\n            <App />\r\n        </>\r\n    }\r\n}\r\n*/","\r\nimport { createMuiTheme } from \"@material-ui/core\";\r\nconst theme = createMuiTheme({\r\n    overrides: {\r\n        MuiAppBar: {\r\n            positionFixed: {\r\n                borderBottom: \"2px solid transparent\",\r\n                borderImage: \"linear-gradient(to right,  #ffd66b, #ff8b84) 3\",\r\n                boxShadow: \"none\",\r\n                left: \"0\",\r\n                right: \"auto\",\r\n            },\r\n            positionRelative: {\r\n                borderBottom: \"2px solid transparent\",\r\n                borderImage: \"linear-gradient(to right,  #ffd66b, #ff8b84) 3\",\r\n                boxShadow: \"none\",\r\n                left: \"0\",\r\n                right: \"auto\",\r\n                width: \"100%\",\r\n            },\r\n            root: {\r\n                width: \"34%\",\r\n            },\r\n        },\r\n        MuiButton: {\r\n            textPrimary: {\r\n                color: \"white\",\r\n            },\r\n        },\r\n        MuiDivider: {\r\n            inset: {\r\n                marginRight: \"72px\",\r\n            },\r\n        },\r\n        /*MuiDrawer: {\r\n            paper: {\r\n                backgroundColor: \"#2e2a27 !important\",\r\n            },\r\n        },*/\r\n        MuiListItem: {\r\n            button: {\r\n                transition: \"none !important\",\r\n            },\r\n        },\r\n        MuiListItemIcon: {\r\n            root: {\r\n                marginLeft: \"8px\",\r\n                marginRight: \"4px\",\r\n                transform: \"scale(1.2)\",\r\n            },\r\n        },\r\n        MuiTypography: {\r\n            /*subheading: {\r\n                fontWeight: 500,\r\n            },*/\r\n        },\r\n    },\r\n    palette: {\r\n        primary: {\r\n            dark: \"#161c1f\",\r\n            light: \"#39434a\",\r\n            main: \"#242b2f\",\r\n        },\r\n    },\r\n    typography: {\r\n        fontFamily: \"Montserrat\",\r\n    },\r\n});\r\n\r\nexport default theme;\r\n","import { MuiThemeProvider } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Loaf from \"./Window\";\r\nimport Theme from \"./Theme\";\r\nimport \"./Theme/styles/app.css\";\r\nimport \"./Theme/styles/fonts/montserrat.css\";\r\nimport \"./Theme/styles/index.css\";\r\n\r\nconst App = <MuiThemeProvider theme={Theme}>\r\n    <Loaf />\r\n</MuiThemeProvider>;\r\n\r\nReactDOM.render(App, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}