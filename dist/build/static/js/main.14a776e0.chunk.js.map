{"version":3,"sources":["API/Loaf.ts","API/index.ts","Modules/Drawer/index.tsx","Theme/assets/load_icon.svg","Modules/Message/Request.tsx","Modules/Message/Announcement.tsx","Modules/Utils.tsx","Modules/Message/FriendMessage.tsx","Modules/Message/Message.tsx","API/ChatImages.ts","Modules/Chat/AppBar.tsx","Modules/Chat/UploadImagePreview.tsx","Modules/Chat/DragUploadModal.tsx","Modules/Chat/Chat.tsx","Theme/Components/Avatar.tsx","Modules/Chat/ChatsListEntry.tsx","Modules/Chat/ChatsList.tsx","Theme/Components/LoafButton.tsx","Modules/NewContact/index.tsx","Modules/NewConversation/index.tsx","Modules/Main/index.tsx","Modules/Login/index.tsx","Modules/Register/index.tsx","Modules/Splash/index.tsx","App.tsx","Window.tsx","Theme/index.ts","index.tsx"],"names":["ipcRenderer","window","ipcApi","api","eventName","sync","args","sendSync","send","on","callback","session","getCookie","Loaf","chats","accept","chatId","createGroup","name","users","get","loadImage","loadPageOfMessages","page","message","call","make","data","reject","answer","error","user","add","userId","authenticate","authCode","getUserByName","load","logout","logIn","username","password","register","pwd","Drawer","menu","text","icon","GroupAdd","action","this","props","newConversation","PersonAdd","newContact","secondMenu","PermMedia","Settings","Cancel","ContactSupport","className","Divider","List","map","menuEl","ListItem","button","key","onClick","ListItemIcon","classes","root","ListItemText","primary","Component","Request","chat","CheckCircleRounded","style","color","cursor","id","BlockRounded","Announcement","request","status","questionMark","textToRGB","i","c","str","hash","length","charCodeAt","hashCode","toString","toUpperCase","substring","scrollToBottom","top","messageContainer","document","getElementById","scroll","bottom","scrollHeight","scrollTop","clientHeight","getLast","messages","last","maxPage","Math","max","pages","lastPage","find","getMessagesFromLastPage","Date","date","sortChats","sort","a","b","aLast","bLast","filePreview","file","fileData","fileType","substr","indexOf","base64","fileName","downloadLink","createElement","href","download","click","downloadFile","CloudDownload","Audiotrack","InsertDriveFile","fileIcon","bytesToString","size","renderGallery","filter","type","payload","content","startsWith","src","alt","bytes","unit","toFixed","FriendMessage","renderAvatar","sender","Avatar","renderContent","console","log","Message","my","storage","images","onLoad","Map","set","loading","image","img","LoafAppBar","AppBar","position","Toolbar","paddingTop","paddingBottom","backgroundColor","charAt","inset","secondary","React","DragUploadModal","renderEntry","setFiles","backgroundImage","sendFiles","state","highlight","e","stopPropagation","CloudUpload","isLoading","Chat","allow","preventDefault","whileOver","evt","setState","drop","dataTransfer","handleFiles","files","componentDidMount","setTimeout","filesToSend","readFile","index","reader","FileReader","readAsDataURL","onload","result","push","getAllMessagesCount","reduce","loadMoreMessages","loadMoreByScroll","_inView","entry","intersectionRatio","form","handleKeyDown","textMessage","sendMessages","filePayload","handleChange","target","value","onDragOver","onDragEnter","onDragOverCapture","onDragEnd","onDragLeave","onDrop","pageEntry","threshold","trackVisibility","delay","as","onChange","Fragment","msg","uuid","senderId","dateToCheck","moment","format","allMessages","flat","messageIndex","isThisFirstDateOccurence","chatName","TextField","onKeyDown","placeholder","fullWidth","variant","InputLabelProps","shrink","InputProps","inputProps","LoafAvatar","getLastTag","private","getSubText","ChatsListEntry","isCurrent","unread","loadChat","fromNow","ChatsList","chatImage","currentChat","LoafButton","main","big","rest","Button","disableElevation","children","NewContact","ev","addContact","onClose","closeDrawer","Paper","DialogTitle","DialogContent","width","disabled","startAdornment","InputAdornment","DialogActions","NewConversation","toggleChatEntry","selectedChats","includes","createConversation","userIds","dense","ListItemAvatar","ListItemSecondaryAction","IconButton","edge","aria-label","Remove","Add","addPageToChat","existingEntry","didLastPageChange","newPages","maxNewPage","newMaxPageEntry","lastPageEntry","currentUUIDs","newUUIDs","currentUUID","Main","setContactModal","newContactModal","setConversationModal","newConversationModal","toggleDrawer","drawer","container","toISOString","newChats","newInCurrent","newCurrentChat","indexOfCurrentChat","findIndex","chatPage","targetChat","Menu","Typography","noWrap","logo","Search","SwipeableDrawer","open","onOpen","paper","Modal","Login","keyPress","event","field","API","validate","authentication","required","onKeyPress","togglePage","Register","renderError","done","qrcode","renderForm","firstName","marginTop","QRCode","toDataURL","url","Backdrop","CircularProgress","SplashScreen","LinearProgress","App","getUser","loggedInUser","useState","setError","showError","setShowError","useEffect","theme","createMuiTheme","overrides","MuiAppBar","positionFixed","borderBottom","borderImage","boxShadow","left","right","positionRelative","MuiButton","textPrimary","MuiDivider","marginRight","MuiListItem","transition","MuiListItemIcon","marginLeft","transform","MuiTypography","palette","dark","light","typography","fontFamily","Theme","ReactDOM","render"],"mappings":"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","file":"static/js/main.14a776e0.chunk.js","sourcesContent":["\r\nconst ipcRenderer = window.ipcApi;\r\n\r\nexport const api = (eventName: string, sync: boolean, ...args: any[]) => {\r\n    if(!ipcRenderer) return;\r\n    if (sync) {\r\n        return ipcRenderer.sendSync(eventName, ...args);\r\n    }\r\n    ipcRenderer.send(eventName, ...args);\r\n    return;\r\n    // return new Promise((res, rej) => {\r\n        /*ipcRenderer.on(`${eventName}`, (event, ...vals) => {\r\n            //\r\n            ipcRenderer.removeAllListeners(`${eventName}`);\r\n        });*/\r\n   // });\r\n};\r\n\r\nexport const on = (eventName: string, callback: (...args: any[]) => void) => {\r\n    if(!ipcRenderer) return;\r\n    ipcRenderer.on(eventName, (...vals: any[]) => {\r\n        callback(...vals);\r\n    });\r\n};\r\n","import * as I from \"../../modules/interface\";\r\nimport * as Loaf from \"./Loaf\";\r\n\r\nconst api = {\r\n    session: {\r\n        getCookie: () => Loaf.api(\"getCookie\", true)\r\n    },\r\n    chats: {\r\n        accept: (chatId: number) => Loaf.api(\"acceptChat\", false, chatId),\r\n        createGroup: (name: string, users: number[]) => Loaf.api(\"createGroup\", false, name, users),\r\n        get: () => Loaf.api(\"getChats\", false),\r\n        loadImage: (chatId: number) => Loaf.api(\"loadImage\", false, chatId),\r\n        loadPageOfMessages: (chatId: number, page: number) => Loaf.api(\"loadPageOfMessages\", false, chatId, page),\r\n    },\r\n    message: {\r\n        send: (chatId: number, message: I.IMessageContent) => Loaf.api(\"sendMessage\", false, chatId, message),\r\n    },\r\n    call: {\r\n      make: (data: I.CallDescription) => Loaf.api('call-to-user', false, data),\r\n      reject: () => Loaf.api('reject-call', false),\r\n      answer: (data: I.CallDescription) => Loaf.api('exchange-offer', false, data),\r\n      accept: (data: I.CallDescription) => Loaf.api('accept-call', false, data),\r\n      error: () => Loaf.api('errortest', false)\r\n    },\r\n    user: {\r\n        add: (userId: number | string) => Loaf.api(\"addUser\", false, userId),\r\n        authenticate: (authCode: number) => Loaf.api(\"authenticateUser\", false, authCode),\r\n        get: () => Loaf.api(\"getUser\", true),\r\n        getUserByName: (name: string) => Loaf.api(\"getUserByName\", false, name),\r\n        load: () => Loaf.api(\"loadUser\", false),\r\n        logout: () => Loaf.api(\"logout\", false),\r\n        logIn: (username: string, password: string) => Loaf.api(\"logInUser\", false, username, password),\r\n        register: (username: string, pwd: string, name: string) => Loaf.api(\"register\", false, username, pwd, name ),\r\n    },\r\n};\r\n\r\nexport default api;\r\n","import React, { Component } from 'react';\r\nimport { ListItemIcon, List, Divider, ListItem, ListItemText } from '@material-ui/core';\r\nimport { Settings, GroupAdd, PersonAdd, Cancel, ContactSupport, PermMedia } from '@material-ui/icons';\r\nimport api from 'API';\r\n\r\ninterface IProps {\r\n    newContact: () => void,\r\n    newConversation: () => void,\r\n}\r\n\r\ntype MenuEntry = {\r\n  text: string,\r\n  icon: any,\r\n  action?: () => any | Promise<any>\r\n}\r\n\r\n\r\nexport default class Drawer extends Component<IProps> {\r\n    render(){\r\n        const menu: MenuEntry[] = [{\r\n            text:\"New Conversation\",\r\n            icon:GroupAdd,\r\n            action: this.props.newConversation\r\n          },{\r\n            text:\"Add Contact\",\r\n            icon: PersonAdd,\r\n            action: this.props.newContact\r\n          }];\r\n\r\n          const secondMenu: MenuEntry[] = [{\r\n            text:\"Media\",\r\n            icon:PermMedia\r\n          },{\r\n            text:\"Settings\",\r\n            icon:Settings\r\n          },{\r\n            text:\"Logout\",\r\n            icon:Cancel,\r\n            action: api.user.logout\r\n          },{\r\n            text:\"About LOAF\",\r\n            icon: ContactSupport\r\n          }];\r\n        return(<div className='sidenav'>\r\n          <div className='userView'>\r\n            <div className='background'></div>\r\n              <span className='firstName'>Hubert</span>\r\n              <span className='username'>@osztenkurden</span>\r\n          </div>\r\n          <Divider />\r\n          <List>\r\n            {menu.map((menuEl) => (\r\n              <ListItem button key={menuEl.text} className='menu' onClick={menuEl.action}>\r\n                <ListItemIcon  classes={{root:'menu-icon'}}><menuEl.icon /></ListItemIcon>\r\n                <ListItemText classes={{primary:'menu-entry'}} primary={menuEl.text} />\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n          <Divider />\r\n          <List>\r\n            {secondMenu.map((menuEl) => (\r\n              <ListItem button key={menuEl.text} className='menu' onClick={menuEl.action}>\r\n                <ListItemIcon classes={{root:'menu-icon'}}><menuEl.icon /></ListItemIcon>\r\n                <ListItemText classes={{primary:'menu-entry'}} primary={menuEl.text} />\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n          </div>);\r\n    }\r\n}","export default __webpack_public_path__ + \"static/media/load_icon.f5b74f47.svg\";","import { BlockRounded, CheckCircleRounded } from \"@material-ui/icons\";\r\nimport React, { Component } from \"react\";\r\nimport * as I from \"./../../../modules/interface\";\r\n\r\ninterface IProps {\r\n    chat: I.IChatPaged;\r\n    accept: (chatId: number) => void;\r\n}\r\n\r\nexport default class Request extends Component<IProps> {\r\n    public render() {\r\n        const { chat, accept } = this.props;\r\n        return <div className={\"announcement message\"}>\r\n            <div>\r\n                <p>You've got a request from <strong>{chat.name}</strong>. Accept?</p>\r\n                <p>\r\n                    <CheckCircleRounded\r\n                        style={{ color: \"#2fc52f\", cursor: 'pointer' }}\r\n                        onClick={() => accept(chat.id)} />\r\n                    <BlockRounded style={{ color: \"red\", cursor: 'pointer' }} />\r\n                </p>\r\n            </div>\r\n        </div>;\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport * as I from \"./../../../modules/interface\";\r\nimport api from \"./../../API\";\r\nimport Request from \"./Request\";\r\n\r\nexport default class Announcement extends Component<{ request: boolean, chat: I.IChatPaged }> {\r\n    public render() {\r\n        const { chat, request } = this.props;\r\n        if (request) {\r\n            return <Request chat={chat} accept={() => api.chats.accept(chat.id)}/>;\r\n        }\r\n        return <div className={\"announcement message\"}>\r\n            <p>{\r\n                chat.status === 5 ?\r\n                `${chat.name} still hasn't accepted your request`\r\n                : \"No messages\"\r\n                }\r\n            </p>\r\n        </div>;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport * as I from '../../modules/interface';\r\nimport { Audiotrack, InsertDriveFile, CloudDownload } from \"@material-ui/icons\";\r\n\r\nexport function hashCode(str: string) { // java String#hashCode\r\n    let hash = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        // tslint:disable-next-line:no-bitwise\r\n        hash = str.charCodeAt(i) + ((hash << 5) - hash);\r\n    }\r\n    return hash;\r\n}\r\n\r\nconst downloadFile = (base64: string, fileName: string) => {\r\n    const downloadLink = document.createElement(\"a\");\r\n    downloadLink.href = base64;\r\n    downloadLink.download = fileName;\r\n    downloadLink.click();\r\n}\r\n\r\nexport const questionMark = 'iVBORw0KGgoAAAANSUhEUgAAAHQAAAB0CAQAAAD+k96sAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAAmJLR0QA/4ePzL8AAAAHdElNRQfkAg8WFhR9Sw5qAAAD4klEQVR42u2bTWhVRxSAv/jEkPeoxp+ApqGgtMFoRKORRCzSRcG0Cy0tuCh0WySCdtdEKuJGrcSFIAhtQcGAFFpL4kLQ2ig1pC30h9dU8AeiRpqfFqttjTGa3C4erUWomXPvnXvvKecbyGrezHyZmXfPnDsPDMMwDCN2yry2nmcVK3iOGmqoJk8FFVQwxQPGGed3hhhmiBv08xO/aBStpIWNrGUpOefPjPI1PfRQZErDCplNK1/wkCB0GeUIGzyvtIg08CF/RlD8dxlkJ/OyKLmKrpgUH5d7HGZRliSr+Zip2DVL5Q/aKc/Gt/ZW7nqS/LtcoyltzQV87lmyVB7Sxoz0NNdwIxHNUvkkrSX8KvcT1AwIOM+c5DU38SBhzYCAPiqSns2JFDQDAj4Lu1dzIT5Tz+mk/7P/sJRZnEvqm/Z6SrNZKpOsT0b001Q1S8/VvH/Nt1LXDAho8605n98yIXqbSunQZ4pq75J3AMA4PVzkO64zzBhlzKWS+aykmWZeCNHeXHawx998Lgn17LxCK4WntNrIsRChx6DPkPCDEMN53WlAz3JG3HaLv/05JhxKp2Chl7GDR6LWj/sSbRdqbhf3sIVJQftDvkSviDTfCdXHe6I+lvnJB0mG8H7IXnJ8K+jlbR+i+wUD6I9wcmwR9HPQh+iPzt0/ojFST9ecezoVv2aVIPnVGbGvA4KVI8DtsfuSIKHcEVH0onPNOfGLumfhivwQUfSyc81n4hetd26vO/I2+dm5ZiF+0RXO7V2ILDrmXFP0Mmqm4x4tUKBAftq/xcii7vN0P37Rqwlmhdzj4zvxL91k01+u3NItutq55oBu0c3ONb9HMbWCWHe9ZtETggRZTq/mi4KY+qhezdkMCBbuGq2aM+gWaPbqnc8OUQ5ji1bNXSLN3mzfQ/pv9oo0JwSnqQxRzjFhInWfRs2F9Ak1v2SWPs1Gbgk1B6jSp7mNcaHmHUEKICNUclL8WulXfUFCU4h7EEMs16bZGuI9az9LdEnm6QzxMrlLltpMnxqKIa7b7NEWB9WG2JkjvKxtZzYwItY8l60b2C6sE19fnuDdDGa0pmEZt4WalzUerKu4KdT8SPZeJSuZg7PCMO8NnWdN2W2WIs/r1KwTBe4nkri36YfzAs1DWhMk8JpAc7fevF4ZlwSzqZhXBBdpcppFTztq3tR2Nnkyh+D6K9LNqOZN57Omco46ijZoF3U7Yn+TXCTqh3LqnOp1axdd7Hix5yvtotWO9S5pF3VLgQSMYhiGYRiGYRh+8JVJDVIfQUJBfeYwURM1URM1URM1URM1URM1URM1URM1URM1DOP/zl+IROP1bg+NpwAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAyMC0wMi0xNVQyMjoyMjoyMCswMDowMBpZaTEAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMjAtMDItMTVUMjI6MjI6MjArMDA6MDBrBNGNAAAAAElFTkSuQmCC';\r\nexport function textToRGB(i: string) {\r\n    // tslint:disable-next-line:no-bitwise\r\n    const c = (hashCode(i) & 0x00FFFFFF)\r\n        .toString(16)\r\n        .toUpperCase();\r\n\r\n    return \"#\" + \"00000\".substring(0, 6 - c.length) + c;\r\n}\r\nexport const scrollToBottom  = (top = 0) => {\r\n    const messageContainer = document.getElementById(\"message_container\");\r\n    if(!messageContainer) return 0;\r\n    if(top){\r\n        messageContainer.scroll({ top });\r\n        return;\r\n    }\r\n    const bottom = messageContainer.scrollHeight - messageContainer.scrollTop - messageContainer.clientHeight;\r\n\r\n    if(bottom <= 100){\r\n        messageContainer.scroll({ top: messageContainer.scrollHeight });\r\n    }\r\n    return;\r\n}\r\nexport const fileIcon = (fileType: string) => {\r\n    if(fileType === \"audio\") {\r\n        return <Audiotrack />;\r\n    }\r\n    return <InsertDriveFile />;\r\n}\r\n\r\n\r\nexport const getMessagesFromLastPage = (chat: I.IChatPaged | null) => {\r\n    if(!chat) return [];\r\n    if(chat.last) return [chat.last];\r\n    const maxPage = Math.max(...chat.pages.map(page => page.page));\r\n    const lastPage = chat.pages.find(page => page.page === maxPage);\r\n    if(!lastPage) return [];\r\n    return lastPage.messages;\r\n}\r\nexport const getLast = (chat: I.IChatPaged | null) => {\r\n    const messages = getMessagesFromLastPage(chat);\r\n    let last: I.IMessage | null = null;\r\n\r\n    for(const message of messages){\r\n        if(!last){\r\n            last = message;\r\n            continue;\r\n        }\r\n        if(new Date(message.date) > new Date(last.date)){\r\n            last = message;\r\n        }\r\n    }\r\n    return last;\r\n}\r\n\r\nexport const sortChats = (chats: I.IChatPaged[]) => {\r\n    const sortedChats = [...chats].sort((a, b) => {\r\n        const [aLast, bLast] = [getLast(a), getLast(b)];\r\n\r\n        if(!aLast || !bLast) return 0;\r\n        const [aDate, bDate] = [new Date(aLast.date), new Date(bLast.date)];\r\n\r\n        if(aDate > bDate) return -1;\r\n        return 1;\r\n    });\r\n    return sortedChats;\r\n}\r\n\r\nexport const filePreview = (file: I.IMessageContentFileMeta) => {\r\n    const fileData = file.data;\r\n    const fileType = fileData.substr(fileData.indexOf(':') + 1, fileData.indexOf('/') - fileData.indexOf(':') - 1);\r\n    return (\r\n        <div className=\"file-preview\">\r\n            <div className=\"file-icon\" onClick={() => downloadFile(fileData, file.name)} >\r\n                <div className=\"hover-icon\">\r\n                    <CloudDownload />\r\n                </div>\r\n                <div className=\"default-icon\">\r\n                    {fileIcon(fileType)}\r\n                </div>\r\n            </div>\r\n            <div className=\"file-data\">\r\n                <div className=\"file-name\">\r\n                    {file.name}\r\n                </div>\r\n                <div className=\"file-size\">\r\n                    {bytesToString(file.size)}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function renderGallery(message: I.IMessageContentPackage[]) {\r\n    const isFile = (file: I.IMessageContentPackage): file is I.IMessageContentFile => file.type === \"file\";\r\n    return <div className=\"many-msg-types\">\r\n        {message.filter(isFile).map(payload => {\r\n            const fileData = payload.content.data;\r\n            if (fileData.startsWith(\"data:image\")) {\r\n                return <img src={fileData} alt={'Upload'} />\r\n            }\r\n            return filePreview(payload.content);\r\n        })}\r\n        {message.filter(payload => payload.type === \"text\").map(payload => <p>{payload.content}</p>)}\r\n\r\n    </div>\r\n}\r\n\r\nexport function bytesToString(bytes: number) {\r\n    function toHigherOrder(lowerBytes: number) {\r\n        return (lowerBytes / 1024);\r\n    }\r\n\r\n    const units = [\"B\", \"KB\", \"MB\", \"GB\", \"TB\"];\r\n\r\n    for (const unit of units) {\r\n        if (bytes < 1024) {\r\n            return `${bytes.toFixed(1)} ${unit}`;\r\n        }\r\n        bytes = toHigherOrder(bytes);\r\n    }\r\n\r\n    return `${bytes.toFixed(1)} PB`;\r\n}","import React, { Component } from \"react\";\r\nimport { textToRGB, renderGallery, questionMark } from './../Utils';\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport * as I from \"./../../../modules/interface\";\r\n\r\nexport default class FriendMessage extends Component<{message: I.IMessage, sender: { username: string, id: number}}>{\r\n    renderAvatar = () => {\r\n        const { sender } = this.props;\r\n        \r\n        \r\n        //TODO: Avatar as URL and fallback\r\n        \r\n        return <Avatar src={``} className=\"avatar\"/>\r\n        \r\n        /*return <Avatar className=\"avatar\" style={{ backgroundColor: textToRGB(sender.username) }}>\r\n            {sender.username?.charAt(0).toUpperCase() || `#${sender.id}`}\r\n        </Avatar>*/\r\n    }\r\n    renderContent = () => {\r\n        const { message } = this.props;\r\n        if(message.content.type === 'file'){\r\n            console.log(message);\r\n        }\r\n        switch(message.content.type){\r\n            case \"text\":\r\n                return <p>{message.content.content}</p>\r\n            case \"file\":\r\n                return <div><img src={message.content.content.data} alt={'Upload'}/></div>\r\n            case \"mixed\":\r\n                return renderGallery(message.content.content);\r\n        }\r\n    }\r\n    public render(){\r\n        const { message, sender } = this.props;\r\n        return <div className={`message friend ${message.content.type}`}>\r\n            {this.renderAvatar()}\r\n            <div className=\"message-container\">\r\n                <div className=\"message-sender-name\">\r\n                    {sender.username}\r\n                </div>\r\n                {this.renderContent()}\r\n            </div>\r\n        </div>;\r\n    }\r\n}","import { questionMark, renderGallery } from \"Modules/Utils\";\r\nimport React, { Component } from \"react\";\r\nimport * as I from \"./../../../modules/interface\";\r\nimport FriendMessage from './FriendMessage'\r\n\r\nexport default class Message extends Component<{message: I.IMessage, chatName: string}, any> {\r\n    renderContent = () => {\r\n        const { message } = this.props;\r\n        switch(message.content.type){\r\n            case \"text\":\r\n                return <p>{message.content.content}</p>\r\n            case \"file\":\r\n                return renderGallery([message.content])\r\n            case \"mixed\":\r\n                return renderGallery(message.content.content);\r\n        }\r\n    }\r\n    public render() {\r\n        const { message } = this.props;\r\n        /*if(message.content.type === \"mixed\") return <div className={\"message\"}>\r\n            <p>Not supported yet</p>\r\n        </div>;*/\r\n        if(!message.my && message.sender) return <FriendMessage message={message} sender={message.sender}/>\r\n        return <div className=\"message\">\r\n            {this.renderContent()}\r\n        </div>\r\n    }\r\n}\r\n","\r\nimport api from './';\r\nimport * as Loaf from \"./Loaf\";\r\ninterface ChatImage {\r\n    loading: boolean;\r\n    image: string | null;\r\n}\r\n\r\nclass ChatImageStorage {\r\n    images: Map<number, ChatImage>;\r\n    onLoad?: () => void;\r\n    constructor(){\r\n        this.images = new Map();\r\n        this.onLoad = () => {}\r\n        Loaf.on(\"imageLoaded\", (data: {id: number, image: string|null}) => {\r\n            this.images.set(data.id, {loading:false, image:data.image});\r\n            if(this.onLoad) this.onLoad();\r\n        });\r\n    }\r\n    set(onLoad: () => void){\r\n        this.onLoad = onLoad;\r\n        return this;\r\n    }\r\n    get(chatId: number){\r\n        const img = this.images.get(chatId);\r\n        if(!img) return this.load(chatId);\r\n        if(img.loading){ return null};\r\n        return img.image;\r\n    }\r\n\r\n    private load(chatId: number){\r\n        this.images.set(chatId, {loading: true, image: null});\r\n        api.chats.loadImage(chatId);\r\n        return null;\r\n    }\r\n}\r\nconst storage = new ChatImageStorage();\r\nexport default storage;\r\n\r\nexport { ChatImageStorage };\r\n","import React from 'react';\r\nimport { AppBar, Toolbar, ListItem, Avatar } from '@material-ui/core';\r\nimport { textToRGB } from 'Modules/Utils';\r\nimport * as I from \"./../../../modules/interface\";\r\nimport { ListItemText } from '@material-ui/core';\r\nimport storage from \"./../../API/ChatImages\";\r\n\r\ninterface IProps {\r\n    chat: I.IChatPaged;\r\n}\r\n\r\nexport default class LoafAppBar extends React.Component<IProps> {\r\n    public render(){\r\n        const { chat } = this.props;\r\n        return <AppBar position=\"relative\" >\r\n            <Toolbar className=\"bar\">\r\n                <ListItem style={{paddingTop:0,paddingBottom:0}}>\r\n                    {chat.image ?\r\n                    <Avatar src={`data:image/jpeg;base64,${storage.get(chat.id)}`} className='avatar' /> :\r\n                    <Avatar className=\"avatar\" style={{ backgroundColor: textToRGB(chat.name) }}>\r\n                    {chat.name.charAt(0)?.toUpperCase() || '#'}</Avatar>}\r\n                    <ListItemText inset\r\n                        className=\"chat-text-item\"\r\n                        primary={\r\n                            <div className={\"chat-name\"}>\r\n                                <div className=\"chat-name-text\">{chat.name}</div>\r\n                            </div>\r\n                        } secondary={\r\n\r\n                            <div className=\"chat-last-message\">\r\n                                <div className=\"text\">\r\n                                    { chat.last?.my ?\r\n                                        <span className=\"you\">Ty:</span>\r\n                                    : \"\" } Last seen 10 minutes ago</div>\r\n                            </div>} />\r\n                </ListItem>\r\n            </Toolbar>\r\n        </AppBar>\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport { FilePayloadData } from './Chat';\r\nimport { bytesToString, questionMark } from './../Utils';\r\nimport { Cancel } from '@material-ui/icons';\r\n\r\ninterface IProps {\r\n    images: FilePayloadData[];\r\n    setFiles: (files: FilePayloadData[]) => void;\r\n    sendFiles: () => void;\r\n}\r\n\r\nexport default class DragUploadModal extends Component<IProps> {\r\n    public render() {\r\n        const { images, sendFiles } = this.props;\r\n        return (\r\n            <div className=\"upload-image-preview\">\r\n                <div className=\"upload-entries-preview\">\r\n                    {images.map(this.renderEntry)}\r\n                </div>\r\n                <div className=\"image-send btn-behaviour\" onClick={sendFiles}>SEND</div>\r\n            </div>\r\n        );\r\n    }\r\n    private renderEntry = (file: FilePayloadData) => {\r\n        const { images, setFiles } = this.props;\r\n        return <div className=\"upload-entry-preview\">\r\n            <div className=\"preview-image-container\">\r\n                <div className=\"preview-image\" style={{backgroundImage: file.data.startsWith('data:image') ? `url(${file.data})` : `url(data:image/jpeg;base64,${questionMark})`}}></div>\r\n            </div>\r\n            <div className=\"preview-data-container\">\r\n                <div className=\"preview-data-name\">{file.name}</div>\r\n                <div className=\"preview-data-size\">{bytesToString(file.size)}</div>\r\n            </div>\r\n            <div className=\"preview-action-container\">\r\n                <div className=\"cancel-file\" onClick={() => setFiles(images.filter(img => img !== file))}><Cancel /></div>\r\n            </div>\r\n        </div>\r\n    }\r\n\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { CloudUpload } from \"@material-ui/icons\";\r\nimport { FilePayloadData } from './Chat';\r\nimport UploadImagePreview from './UploadImagePreview';\r\n\r\ninterface IProps {\r\n    images: FilePayloadData[];\r\n    setFiles: (files: FilePayloadData[]) => void;\r\n    sendFiles: () => void;\r\n}\r\ninterface IState {\r\n    highlight: boolean;\r\n}\r\n\r\nexport default class DragUploadModal extends Component<IProps, IState> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            highlight: false\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        const { images, sendFiles, setFiles } = this.props;\r\n        return (\r\n            <div className=\"drag-show\" onClick={() => setFiles([])}>\r\n                <div className={`drag-window ${images.length ? 'dropped' : ''}`} onClick={e => e.stopPropagation()}>\r\n                    {images.length ? <UploadImagePreview\r\n                        setFiles={setFiles}\r\n                        sendFiles={sendFiles}\r\n                        images={images}\r\n                    /> : <div className='drag-window-content'>\r\n                            <CloudUpload />\r\n                            Drop your images here\r\n                        </div>}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n","import { TextField } from \"@material-ui/core\";\r\nimport moment from \"moment\";\r\nimport React, { Component } from \"react\";\r\nimport Announcement from \"../Message/Announcement\";\r\nimport Message from \"../Message/Message\";\r\nimport * as Loaf from \"./../../API/Loaf\";\r\nimport * as I from \"./../../../modules/interface\";\r\nimport api from \"./../../API\";\r\nimport AppBar from './AppBar';\r\nimport DragUploadModal from './DragUploadModal';\r\nimport { InView } from 'react-intersection-observer';\r\nimport { scrollToBottom } from \"Modules/Utils\";\r\nexport interface FilePayloadData {\r\n    data: string,\r\n    size: number,\r\n    name: string\r\n}\r\ninterface IProps {\r\n    chat: I.IChatPaged | null;\r\n    hash: string;\r\n}\r\n\r\n\r\ninterface IState {\r\n    form: {\r\n        textMessage: string;\r\n        files: FilePayloadData[]\r\n    };\r\n    highlight: boolean;\r\n}\r\n\r\nconst getKeyFromMessage = (msg: I.IMessage) => {\r\n    return `${msg.uuid}-${msg.senderId}-${msg.date}-${msg.date}-${msg.id || 'xd'}`;\r\n}\r\n\r\nconst isThisFirstDateOccurence = (pages: I.IPage[], message: I.IMessage) => {\r\n    const dateToCheck = moment(message.date).format('dddd, MMMM Do YYYY')\r\n\r\n    const allMessages = pages.map(page => page.messages).flat();\r\n\r\n    const messageIndex = allMessages.indexOf(message);\r\n\r\n    const listOfDates = allMessages.map(msg => moment(msg.date).format('dddd, MMMM Do YYYY'));\r\n\r\n    return listOfDates.indexOf(dateToCheck) === messageIndex;\r\n}\r\n\r\nlet isLoading = false;\r\n\r\nexport default class Chat extends Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            form: {\r\n                textMessage: \"\",\r\n                files: []\r\n            },\r\n            highlight: false\r\n        };\r\n    }\r\n\r\n    allow = (e: React.DragEvent<HTMLDivElement>) => {\r\n        \r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n    }\r\n\r\n    whileOver = (evt: React.DragEvent<HTMLDivElement>) => {\r\n        console.log('a')\r\n        let highlight = false;\r\n        if (evt.type === \"dragenter\" || evt.type === \"dragover\") {\r\n            highlight = true;\r\n        }\r\n        if (this.state.highlight !== highlight) {\r\n            this.setState({ highlight })\r\n        }\r\n    }\r\n\r\n    drop = (evt: React.DragEvent<HTMLDivElement>) => {\r\n        evt.preventDefault();\r\n        if (evt.dataTransfer)\r\n            this.handleFiles(evt.dataTransfer.files);\r\n\r\n        this.setState({ highlight: false });\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        console.log()\r\n        Loaf.on(\"chatPage\", () => {\r\n            setTimeout(() => {\r\n                scrollToBottom(62);\r\n                isLoading = false;\r\n            }, 0);\r\n        });\r\n    }\r\n\r\n    public handleFiles = (files: FileList) => {\r\n        if (!files || !files.length) return;\r\n        const filesToSend: FilePayloadData[] = [];\r\n\r\n        const readFile = (index: number, file?: File) => {\r\n            /*if(file && !file.type?.startsWith(\"image/\")){\r\n                return;\r\n            }*/\r\n            if (!file) {\r\n                return this.setFiles(filesToSend);\r\n                /*return this.setState(state => {\r\n                    state.form.images = images;\r\n                    return state;\r\n                }, () => console.log(this.state));*/\r\n            }\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(file);\r\n            reader.onload = () => {\r\n                if (typeof reader.result !== \"string\") {\r\n                    return readFile(index + 1, files[index + 1]);;\r\n                }\r\n                const img = reader.result;\r\n\r\n                filesToSend.push({\r\n                    data: img,\r\n                    name: file.name,\r\n                    size: file.size,\r\n                });\r\n                return readFile(index + 1, files[index + 1]);\r\n            }\r\n        }\r\n\r\n        readFile(0, files[0]);\r\n    }\r\n\r\n    getAllMessagesCount = () => {\r\n        const { chat } = this.props;\r\n        if (!chat) return 0;\r\n        const allMessagesCount = chat.pages.map(page => page.messages.length).reduce((a, b) => a + b, 0);\r\n        return allMessagesCount;\r\n    }\r\n\r\n    public loadMoreMessages = (page: number) => {\r\n        const { chat } = this.props;\r\n        if (!chat || chat.status !== 2) {\r\n            return;\r\n        }\r\n        api.chats.loadPageOfMessages(chat.id, page);\r\n    }\r\n\r\n    public loadMoreByScroll = (page: number) => (_inView: boolean, entry: IntersectionObserverEntry) => {\r\n        if (isLoading) return;\r\n        if (!entry || entry.intersectionRatio < 0.98) return;\r\n        isLoading = true;\r\n        this.loadMoreMessages(page);\r\n    }\r\n\r\n    public render() {\r\n        const { chat } = this.props;\r\n        if (!chat) {\r\n            return <div className={`chat_container empty`}></div>;\r\n        }\r\n\r\n        return (\r\n            <div className=\"chat_container\">\r\n                <AppBar chat={chat} />\r\n                <div id=\"message_container\" className={`message_container ${this.state.highlight ? 'highlight-drag' : ''} ${this.state.form.files.length ? 'upload' : ''}`}\r\n                    onDragOver={this.allow}\r\n                    onDragEnter={this.whileOver}\r\n                    onDragOverCapture={this.whileOver}\r\n                    onDragEnd={this.whileOver}\r\n                    onDragLeave={this.whileOver}\r\n                    onDrop={this.drop}\r\n                >\r\n                    {chat.status === 1 || !this.getAllMessagesCount() ?\r\n                        <Announcement\r\n                            request={chat.status === 1}\r\n                            chat={chat}\r\n                        /> : null}\r\n                    {\r\n                        chat.status === 2 ? (\r\n                            chat.pages.map(page => (\r\n                                <>\r\n                                    {\r\n                                        page.page > 0 && !chat.pages.find(pageEntry => pageEntry.page === page.page - 1) ? (\r\n                                            <>\r\n                                                {/*<InView threshold={0} trackVisibility={true} delay={100}>\r\n                                                {({ inView, ref, entry }) => (\r\n                                                    <div  ref={ref} className=\"load-messages-button\" onClick={() => this.loadMoreMessages(page.page - 1)}>LOAD MORE MESSAGES {inView} {entry ? (Math.floor(entry.intersectionRatio * 100)) + \"%\" : 'nic'}...</div>\r\n                                                )}\r\n                                                </InView>*/}\r\n                                                <InView threshold={0} trackVisibility={true} delay={100} as=\"div\" className=\"load-messages-button\" onClick={() => this.loadMoreMessages(page.page - 1)} onChange={this.loadMoreByScroll(page.page-1)}>\r\n                                                    LOAD MORE MESSAGES\r\n                                                </InView>\r\n                                            </>\r\n                                        ) : null\r\n                                    }\r\n                                    {page.messages.map((message) => (\r\n                                        <React.Fragment key={getKeyFromMessage(message)}>\r\n                                            {\r\n                                                isThisFirstDateOccurence(chat.pages, message) ? (\r\n                                                    <div className=\"date-tag\">{moment(message.date).format('dddd, MMMM Do YYYY')}</div>\r\n                                                ) : null\r\n                                            }\r\n                                            <Message message={message} chatName={chat.name} />\r\n                                        </React.Fragment>\r\n                                    ))}\r\n                                </>\r\n                            ))\r\n                        ) : null\r\n                    }\r\n                </div>\r\n                <DragUploadModal\r\n                    images={this.state.form.files}\r\n                    setFiles={this.setFiles}\r\n                    sendFiles={this.sendFiles}\r\n                />\r\n                {chat.status === 2 ? <div className=\"text_sender\">\r\n                    <TextField\r\n                        onChange={this.handleChange}\r\n                        name=\"textMessage\"\r\n                        onKeyDown={this.handleKeyDown}\r\n                        id=\"full-width\"\r\n                        placeholder=\"Type in a message...\"\r\n                        fullWidth\r\n                        value={this.state.form.textMessage}\r\n                        variant=\"outlined\"\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                        InputProps={{\r\n                            classes: {\r\n                                root: 'outline-container'\r\n                            }\r\n                        }}\r\n                        inputProps={{\r\n                            style: { color: 'white' }\r\n                        }}\r\n                    />\r\n                </div> : null}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private setFiles = (files: FilePayloadData[]) => {\r\n        this.setState(state => {\r\n            state.form.files = files;\r\n            return state;\r\n        });\r\n    }\r\n\r\n    private handleKeyDown = (e: any) => {\r\n        if (e.key === \"Enter\" && this.state.form.textMessage && this.props.chat) {\r\n            // TODO: SEND MESSAGE\r\n            const content = this.state.form.textMessage;\r\n            api.message.send(this.props.chat.id, { type: \"text\", content });\r\n            this.setState({ form: { textMessage: \"\", files: [] } });\r\n        }\r\n    }\r\n    private sendMessages = async (chatId: number, message: I.IMessageContent) => {\r\n        await api.message.send(chatId, message);\r\n        this.setState({ form: { textMessage: \"\", files: [] } });\r\n    }\r\n    private sendFiles = () => {\r\n        const files = this.state.form.files;\r\n        if (!files.length || !this.props.chat) {\r\n            return console.log(\"NO files OR NO CHAT\");\r\n        }\r\n        if (files.length === 1) {\r\n            const file = this.state.form.files[0];\r\n            const message: I.IMessageContent = {\r\n                type: \"file\",\r\n                content: file\r\n            };\r\n            this.sendMessages(this.props.chat.id, message);\r\n        } else {\r\n            const message: I.IMessageContentMixed = {\r\n                type: \"mixed\",\r\n                content: []\r\n            }\r\n            for (const file of files) {\r\n                const filePayload: I.IMessageContentFile = {\r\n                    type: \"file\",\r\n                    content: file\r\n                }\r\n                message.content.push(filePayload);\r\n            }\r\n            this.sendMessages(this.props.chat.id, message);\r\n        }\r\n    }\r\n    private handleChange = (e: any) => {\r\n        const { form } = this.state;\r\n        const field: \"textMessage\" = e.target.name;\r\n        form[field] = e.target.value;\r\n        this.setState({ form });\r\n    }\r\n}\r\n\r\n","import { Avatar } from \"@material-ui/core\";\r\nimport React, { Component } from \"react\";\r\nimport * as I from \"./../../../modules/interface\";\r\nimport { textToRGB } from './../../Modules/Utils';\r\nimport storage from \"./../../API/ChatImages\";\r\n\r\ninterface IProps  {\r\n    chat: I.IChatPaged;\r\n}\r\n\r\nexport default class LoafAvatar extends Component<IProps> {\r\n    public render() {\r\n        const { chat } = this.props;\r\n        if(chat.image){\r\n            return <Avatar src={`data:image/jpeg;base64,${storage.get(chat.id)}`} className=\"avatar\" />\r\n        }\r\n        return <Avatar className=\"avatar\" style={{backgroundColor: textToRGB(chat.name)}}>\r\n            {chat.name.charAt(0)?.toUpperCase() || \"#\"}\r\n        </Avatar>\r\n    }\r\n}\r\n","import { Divider, ListItem, ListItemText } from \"@material-ui/core\";\r\nimport { getLast } from \"Modules/Utils\";\r\nimport moment from \"moment\";\r\nimport React, { Component } from \"react\";\r\n// import * as API from \"./api\";\r\nimport * as I from \"./../../../modules/interface\";\r\nimport LoafAvatar from \"./../../Theme/Components/Avatar\";\r\n\r\nconst getLastTag = (chat: I.IChatPaged, last: I.IMessage | null) => {\r\n    if(!last) return null;\r\n    if(!last.my && chat.private) return '';\r\n    if(last.my){\r\n        return <span className=\"you\">You:</span>;\r\n    }\r\n    return <span className=\"you\">{last.sender?.username || last.senderId}:</span>\r\n}\r\n\r\nfunction getSubText(chat: I.IChatPaged, last: I.IMessage | null) {\r\n    switch (chat.status) {\r\n        case 5:\r\n            return \"Waiting for response...\";\r\n        case 2:\r\n            if(last?.content.type === \"file\" || last?.content.type === \"mixed\") return \"sent an image\";\r\n            return last?.content.content || \"No messages\";\r\n        case 1:\r\n            return <span className=\"strong\">requested your attention</span>;\r\n        default:\r\n            return \"\";\r\n    }\r\n}\r\n\r\ninterface IProps {\r\n    chat: I.IChatPaged;\r\n    chatImage: string | null;\r\n    loadChat: (chat: I.IChatPaged) => void;\r\n    isCurrent: boolean;\r\n}\r\n\r\nexport default class ChatsListEntry extends Component<IProps> {\r\n    public render() {\r\n        const { chat, isCurrent } = this.props;\r\n        const last = getLast(chat);\r\n        return (\r\n            <div className={`chat-list-entry ${isCurrent ? 'current' : ''}`}>\r\n                <ListItem button\r\n                    className={\"chat-button \" + (chat.unread ? \"new-message\" : \"\")}\r\n                    onClick={() => this.props.loadChat(chat)}\r\n                >\r\n                    <LoafAvatar chat={chat} />\r\n                    <ListItemText inset\r\n                        className=\"text-item\"\r\n                        primary={\r\n                            <div className={\"chat-name\"}>\r\n                                <div className=\"chat-name-text\">{chat.name}</div>\r\n                                <div className=\"last-message-date\">\r\n                                    {last ? moment(last.date).fromNow() : \"\"}\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                        secondary={\r\n                            <div className=\"chat-last-message\">\r\n                                <div className=\"text\">\r\n                                    {getLastTag(chat, last)} {getSubText(chat, last)}\r\n                                </div>\r\n                                <div className={\"last-text-status \" /*+ (chat.lastYours ? chat.status : '')*/}></div>\r\n                            </div>\r\n                        }\r\n                    />\r\n                </ListItem>\r\n                <li>\r\n                    <Divider variant=\"inset\" className=\"separator\" />\r\n                </li>\r\n            </div>);\r\n    }\r\n}\r\n","import { List } from \"@material-ui/core\";\r\nimport React, { Component } from \"react\";\r\nimport * as I from \"./../../../modules/interface\";\r\nimport ChatsListEntry from \"./ChatsListEntry\";\r\n// import moment from \"moment\";\r\nimport storage from './../../API/ChatImages';\r\n\r\n\r\ninterface IProps {\r\n    chats: I.IChatPaged[];\r\n    currentChat: I.IChatPaged | null;\r\n    loadChat: (chat: I.IChatPaged) => void;\r\n}\r\n\r\n\r\nexport default class ChatsList extends Component<IProps> {\r\n    public render() {\r\n        const { chats } = this.props;\r\n        /*const sortedChats = [...chats].sort((a, b) => {\r\n            if(!a.last || !b.last) return 0;\r\n            if(a.last.)\r\n        })*/\r\n        /*const allUsers = chats.map(chat => chat.users).flat();\r\n\r\n        const uniqueUsersId = [...new Set(allUsers.map(user => user.id).filter((id): id is number => id !== undefined))];\r\n        const uniqueUsers = uniqueUsersId.map(id => allUsers.find(user => user.id === id)).filter((user): user is I.IUser => !!user);*/\r\n        return <div className=\"chat-list\">\r\n            <List>\r\n                {chats.map((chat) => <ChatsListEntry\r\n                    key={chat.id}\r\n                    chat={chat}\r\n                    chatImage={storage.get(chat.id)}\r\n                    loadChat={this.props.loadChat}\r\n                    isCurrent={this.props.currentChat?.id === chat.id}\r\n                />)}\r\n            </List>\r\n        </div>;\r\n    }\r\n}\r\n","import { Button } from \"@material-ui/core\";\r\nimport React, { Component } from \"react\";\r\n\r\ninterface IProps  {\r\n    secondary?: boolean;\r\n    main?: boolean;\r\n    big?: boolean;\r\n    onClick?: () => void;\r\n    style?: any;\r\n}\r\n\r\nexport default class LoafButton extends Component<IProps> {\r\n    public render() {\r\n        const { main, big, onClick, secondary, ...rest } = this.props;\r\n        return (\r\n            <Button variant={main ? \"contained\" : \"text\"}\r\n                onClick={onClick}\r\n                disableElevation\r\n                className={big ? \"big-button\" : \"\"}\r\n                color={secondary ? \"secondary\" : \"primary\"}\r\n                {...rest}\r\n                >\r\n                {this.props.children}\r\n            </Button>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Paper, DialogTitle, DialogContent, DialogActions, TextField, InputAdornment } from '@material-ui/core';\r\nimport Button from \"./../../Theme/Components/LoafButton\";\r\nimport * as Loaf from \"./../../API/Loaf\";\r\nimport api from \"../../API\";\r\n//import { MoveToInbox, Mail, Group, Settings, GroupAdd, PersonAdd, Cancel, ContactSupport, PermMedia } from '@material-ui/icons';\r\n\r\ninterface IProps {\r\n    onClose: () => void;\r\n    closeDrawer: () => void;\r\n}\r\n\r\ninterface IState {\r\n    name: string;\r\n    loading: boolean;\r\n}\r\nexport default class NewContact extends Component<IProps, IState> {\r\n    constructor(props: IProps){\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            loading: false\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        Loaf.on(\"userAdded\", (data: boolean) => {\r\n            this.setState({loading: false}, () => {\r\n                if(!data) return;\r\n                this.props.onClose();\r\n                this.props.closeDrawer();\r\n            })\r\n        })\r\n    }\r\n\r\n    onChange = (ev: any) => {\r\n        this.setState({name: ev.target.value});\r\n    }\r\n\r\n    addContact = () => {\r\n        if(!this.state.loading) this.setState({loading: true}, () => api.user.add(this.state.name));\r\n    }\r\n\r\n    render(){\r\n        return(\r\n          <Paper classes={{root:\"modal-container\"}}>\r\n              <DialogTitle style={{color:'white'}}>Adding contact</DialogTitle>\r\n              <DialogContent>\r\n                  <TextField\r\n                    style={{width:'100%'}}\r\n                    className=\"text-field-container\"\r\n                    value={this.state.name}\r\n                    onChange={this.onChange}\r\n                    disabled={this.state.loading}\r\n                    placeholder=\"Username\"\r\n                    InputProps={{\r\n                        className:'contact-input',\r\n                        style:{color:'#fff'},\r\n                        startAdornment: <InputAdornment position=\"start\" className=\"new-contact-adornment\">@</InputAdornment>\r\n                    }}\r\n                  />\r\n              </DialogContent>\r\n              <DialogActions>\r\n                  <Button main big onClick={this.addContact}>Add</Button>\r\n                  <Button big onClick={this.props.onClose}>Cancel</Button>\r\n              </DialogActions>\r\n          </Paper>);\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Paper, DialogTitle, DialogContent, DialogActions, TextField, List, ListItem, ListItemAvatar, Avatar, ListItemText, ListItemSecondaryAction, IconButton } from '@material-ui/core';\r\nimport Button from \"./../../Theme/Components/LoafButton\";\r\nimport * as Loaf from \"./../../API/Loaf\";\r\nimport api from \"../../API\";\r\nimport * as I from \"./../../../modules/interface\";\r\nimport LoafAvatar from \"./../../Theme/Components/Avatar\";\r\nimport { Remove as RemoveIcon, Add as AddIcon } from '@material-ui/icons';\r\n\r\ninterface IProps {\r\n    onClose: () => void;\r\n    closeDrawer: () => void;\r\n    chats: I.IChatPaged[];\r\n}\r\n\r\ninterface IState {\r\n    name: string;\r\n    loading: boolean;\r\n    selectedChats: number[];\r\n}\r\nexport default class NewConversation extends Component<IProps, IState> {\r\n    constructor(props: IProps){\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            loading: false,\r\n            selectedChats: [],\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        Loaf.on(\"createdChat\", (data: boolean) => {\r\n            this.setState({loading: false}, () => {\r\n                if(!data) return;\r\n                this.props.onClose();\r\n                this.props.closeDrawer();\r\n            })\r\n        })\r\n    }\r\n\r\n    onChange = (ev: any) => {\r\n        this.setState({name: ev.target.value});\r\n    }\r\n\r\n    toggleChatEntry = (chatId: number) => () => {\r\n        let selectedChats = this.state.selectedChats;\r\n        if(selectedChats.includes(chatId)){\r\n            selectedChats = selectedChats.filter(id => id !== chatId);\r\n        } else {\r\n            selectedChats.push(chatId);\r\n        }\r\n        this.setState({selectedChats})\r\n    }\r\n\r\n    createConversation = () => {\r\n        const { name, selectedChats } = this.state;\r\n        const userIds: number[] = [];\r\n        const chats = this.props.chats.filter(chat => selectedChats.includes(chat.id)).map(chat => chat.users).flat().map(user => user.id);\r\n        for(const userId of chats){\r\n            if(!userId) continue;\r\n            if(!userIds.includes(userId)) userIds.push(userId);\r\n        }\r\n        if(!this.state.loading) this.setState({loading: true}, () => api.chats.createGroup(name, userIds));\r\n    }\r\n\r\n    render(){\r\n        const { chats } = this.props;\r\n        const { selectedChats } = this.state;\r\n        return(\r\n          <Paper classes={{root:\"modal-container new-conversation\"}}>\r\n              <DialogTitle style={{color:'white'}}>Create group</DialogTitle>\r\n              <DialogContent>\r\n                  <TextField\r\n                    style={{width:'100%'}}\r\n                    className=\"text-field-container\"\r\n                    value={this.state.name}\r\n                    onChange={this.onChange}\r\n                    disabled={this.state.loading}\r\n                    placeholder=\"Group name\"\r\n                    InputProps={{\r\n                        className:'contact-input',\r\n                        style:{color:'#fff'},\r\n                    }}\r\n                />\r\n                <List dense={true}>\r\n                    {chats.filter(chat => chat.private).map(chat => <ListItem className={`new-conversation-entry ${selectedChats.includes(chat.id) ? 'selected':''}`}>\r\n                        <ListItemAvatar>\r\n                            <Avatar>\r\n                                <LoafAvatar chat={chat}  />\r\n                            </Avatar>\r\n                        </ListItemAvatar>\r\n                        <ListItemText\r\n                            primary={<div className=\"visible-name\">{chat.name}</div>}\r\n                            secondary={<div className=\"main-identifier\">{`@${chat.name}`}</div>}\r\n                        />\r\n                        <ListItemSecondaryAction>\r\n                            <IconButton edge=\"end\" aria-label=\"delete\">\r\n                                {selectedChats.includes(chat.id) ? <RemoveIcon  onClick={this.toggleChatEntry(chat.id)}/> : <AddIcon  onClick={this.toggleChatEntry(chat.id)}/>}\r\n                            </IconButton>\r\n                        </ListItemSecondaryAction>\r\n                    </ListItem>)}\r\n                    </List>\r\n              </DialogContent>\r\n              <DialogActions>\r\n                  <Button main big onClick={this.createConversation}>Add</Button>\r\n                  <Button big onClick={this.props.onClose}>Cancel</Button>\r\n              </DialogActions>\r\n          </Paper>);\r\n    }\r\n}","import { AppBar, SwipeableDrawer, IconButton, Toolbar, Typography, Modal } from \"@material-ui/core\";\r\nimport { Menu as MenuIcon, Search as SearchIcon } from \"@material-ui/icons\";\r\nimport DrawerContent from \"./../Drawer\";\r\nimport React, { Component } from \"react\";\r\nimport * as I from \"../../../modules/interface\";\r\nimport api from \"./../../API\";\r\nimport * as Loaf from \"./../../API/Loaf\";\r\nimport logo from \"./../../Theme/assets/load_icon.svg\";\r\nimport Chat from \"./../Chat/Chat\";\r\nimport ChatList from \"./../Chat/ChatsList\";\r\nimport NewContact from \"./../NewContact\";\r\nimport NewConversation from \"./../NewConversation\";\r\nimport storage, {ChatImageStorage} from \"./../../API/ChatImages\";\r\nimport { scrollToBottom, sortChats } from \"Modules/Utils\";\r\n\r\ninterface IState {\r\n    drawer: boolean;\r\n    chats: I.IChatPaged[];\r\n    currentChat: I.IChatPaged | null;\r\n    newContactModal: boolean;\r\n    newConversationModal: boolean;\r\n    storage: ChatImageStorage;\r\n    hash: string,\r\n}\r\n\r\nconst addPageToChat = (chat: I.IChatPaged, pages: I.IPage[]) => {\r\n    for(const page of pages){\r\n        const existingEntry = chat.pages.find(pageEntry => pageEntry.page === page.page);\r\n        if(!existingEntry){\r\n            chat.pages.push(page);\r\n            continue;\r\n        }\r\n        existingEntry.messages = page.messages;\r\n    }\r\n}\r\n\r\nconst didLastPageChange = (chat: I.IChatPaged, newPages: I.IPage[]) => {\r\n    const maxNewPage = Math.max(...newPages.map(page => page.page));\r\n    const maxOldPage = Math.max(...chat.pages.map(page => page.page));\r\n\r\n    if(maxOldPage > maxNewPage){\r\n        return false;\r\n    }\r\n\r\n    const newMaxPageEntry = newPages.find(page => page.page === maxNewPage) as I.IPage;\r\n    const lastPageEntry = chat.pages.find(page => page.page === maxNewPage);\r\n\r\n    if(!lastPageEntry){\r\n        return true;\r\n    }\r\n\r\n    if(newMaxPageEntry.messages.length !== lastPageEntry.messages.length) return true;\r\n\r\n    const currentUUIDs = lastPageEntry.messages.map(message => message.uuid);\r\n    const newUUIDs = newMaxPageEntry.messages.map(message => message.uuid);\r\n\r\n    for(const currentUUID of currentUUIDs){\r\n        if(!newUUIDs.includes(currentUUID)){\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nexport default class Main extends Component<{}, IState> {\r\n    constructor(props: {}) {\r\n        super(props);\r\n        this.state = {\r\n            chats: [],\r\n            currentChat: null,\r\n            drawer: false,\r\n            newContactModal: false,\r\n            newConversationModal: false,\r\n            storage: storage.set(() => this.setState({hash: (new Date()).toISOString()})),\r\n            hash: '',\r\n        };\r\n    }\r\n    public async componentDidMount() {\r\n        Loaf.on(\"chats\", (newChats: I.IChatPaged[]) => {\r\n            const { currentChat } = this.state;\r\n\r\n            let newInCurrent = false;\r\n\r\n\r\n            if(currentChat){\r\n                const newCurrentChat = newChats.find(chat => chat.id === currentChat.id);\r\n                if(newCurrentChat){\r\n                    newInCurrent = didLastPageChange(currentChat, newCurrentChat.pages);\r\n                    addPageToChat(currentChat, newCurrentChat.pages);\r\n                }\r\n                const indexOfCurrentChat = newChats.findIndex(chat => chat.id === currentChat.id);\r\n                if(indexOfCurrentChat >= 0){\r\n                    newChats[indexOfCurrentChat] = currentChat;\r\n                }\r\n            }\r\n\r\n            this.setState({\r\n                chats: sortChats(newChats),\r\n                currentChat\r\n            }, () => {\r\n                if(!newInCurrent) return;\r\n                scrollToBottom();\r\n            });\r\n        });\r\n\r\n        Loaf.on(\"clearPages\", () => {\r\n            this.loadChat(null);\r\n            const { chats } = this.state;\r\n\r\n            chats.map(chat => {\r\n                if(chat.pages.length === 0) return chat;\r\n                const maxPage = Math.max(...chat.pages.map(page => page.page));\r\n                const lastPage = chat.pages.find(page => page.page === maxPage);\r\n                if(!lastPage) return chat;\r\n                chat.pages = [lastPage];\r\n                return chat;\r\n            })\r\n            this.setState({ chats: sortChats(chats) });\r\n        })\r\n\r\n        Loaf.on(\"chatPage\", (chatPage: { chatId: number, pageEntry: I.IPage }) => {\r\n            const { chats, currentChat } = this.state;\r\n            const targetChat = chats.find(chat => chat.id === chatPage.chatId);\r\n\r\n            let newInCurrent = false;\r\n\r\n            if(!targetChat) return;\r\n\r\n            if(!currentChat || currentChat.id !== targetChat.id){\r\n                targetChat.pages = [chatPage.pageEntry];\r\n            } else {\r\n                newInCurrent = didLastPageChange(currentChat, [chatPage.pageEntry]);\r\n                addPageToChat(currentChat, [chatPage.pageEntry]);\r\n                currentChat.pages.sort((a,b) => a.page-b.page);\r\n            }\r\n\r\n            this.setState({\r\n                chats: sortChats(chats),\r\n                currentChat\r\n            }, () => {\r\n                if(!newInCurrent) return;\r\n                scrollToBottom();\r\n            });\r\n        });\r\n        api.chats.get();\r\n    }\r\n    public setContactModal = (state: boolean) => () => {\r\n        this.setState({newContactModal: state});\r\n    }\r\n    public setConversationModal = (state: boolean) => () => {\r\n        this.setState({newConversationModal: state});\r\n    }\r\n    public toggleDrawer = () => {\r\n        this.setState((state) => ({ ...state, drawer: !state.drawer }));\r\n    }\r\n    public render() {\r\n        return (\r\n            <div className=\"loaf-app\">\r\n                <AppBar position=\"fixed\" style={{top:'20px'}} >\r\n                    <Toolbar className=\"bar\">\r\n                        <IconButton className=\"menuButton\" color=\"inherit\" aria-label=\"Open drawer\"  onClick={this.toggleDrawer}>\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\" color=\"inherit\" noWrap className=\"logo-wrapper\">\r\n                            <img src={logo} alt={'Loaf'} />\r\n                        </Typography>\r\n                        <div className=\"searchIcon\">\r\n                            <SearchIcon />\r\n                        </div>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <SwipeableDrawer\r\n                    open={this.state.drawer}\r\n                    onOpen={this.toggleDrawer}\r\n                    onClose={this.toggleDrawer}\r\n                    className=\"sidenav-container\"\r\n                    classes={{paper:'drawer-content'}}\r\n                >\r\n                    <DrawerContent\r\n                        newContact={this.setContactModal(true)}\r\n                        newConversation={this.setConversationModal(true)}\r\n                    />\r\n                </SwipeableDrawer>\r\n                <Modal\r\n                    open={this.state.newContactModal}\r\n                    onClose={this.setContactModal(false)}\r\n                    >\r\n                    <NewContact onClose={this.setContactModal(false)} closeDrawer={this.toggleDrawer}/>\r\n                </Modal>\r\n                <Modal\r\n                    open={this.state.newConversationModal}\r\n                    onClose={this.setConversationModal(false)}\r\n                    >\r\n                    <NewConversation\r\n                        onClose={this.setConversationModal(false)}\r\n                        closeDrawer={this.toggleDrawer}\r\n                        chats={this.state.chats}\r\n                    />\r\n                </Modal>\r\n                <div className=\"playground\">\r\n                    <ChatList\r\n                        chats={this.state.chats}\r\n                        currentChat={this.state.currentChat}\r\n                        loadChat={this.loadChat}\r\n                    />\r\n                    <Chat chat={this.state.currentChat}  hash={this.state.hash} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    private loadChat = (chat: I.IChatPaged | null) => {\r\n        this.setState({ currentChat: chat }, () => {\r\n            setTimeout(() => {\r\n                const container = document.getElementById(\"message_container\");\r\n                if(!container) return;\r\n                container.scroll({ top: container.scrollHeight });\r\n            }, 10);\r\n        });\r\n    }\r\n}\r\n","import { TextField } from \"@material-ui/core\";\r\nimport API from \"API\";\r\nimport React, { Component } from \"react\";\r\nimport LoafButton from \"Theme/Components/LoafButton\";\r\n\r\ninterface IProps {\r\n    authentication?: boolean;\r\n    togglePage: () => void;\r\n}\r\n\r\ninterface IState {\r\n    username: string;\r\n    password: string;\r\n    authCode: number;\r\n}\r\n\r\nexport default class Login extends Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            authCode: 0,\r\n            password: \"\",\r\n            username: \"\",\r\n        };\r\n    }\r\n\r\n    keyPress = (event: any) => {\r\n        if(event.key === \"Enter\"){\r\n            this.logIn();\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        if (this.props.authentication) {\r\n            return (\r\n                <div className=\"loaf-app-splash\">\r\n                    <div id=\"login-page\">\r\n                        <TextField\r\n                            type=\"number\"\r\n                            className=\"username-input\"\r\n                            placeholder=\"Username\"\r\n                            color=\"primary\"\r\n                            value={this.state.authCode}\r\n                            onChange={this.handleChange(\"authCode\")}\r\n                            required\r\n                        />\r\n                        <LoafButton main big onClick={this.validate}>Authenticate</LoafButton>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        return (\r\n            <div className=\"loaf-app-splash\">\r\n                <div id=\"login-page\">\r\n                    <TextField\r\n                        className=\"username-input\"\r\n                        placeholder=\"Username\"\r\n                        color=\"primary\"\r\n                        value={this.state.username}\r\n                        onKeyPress={this.keyPress}\r\n                        onChange={this.handleChange(\"username\")}\r\n                        required\r\n                    />\r\n                    <TextField\r\n                        className=\"password-input\"\r\n                        placeholder=\"Password\"\r\n                        required\r\n                        onKeyPress={this.keyPress}\r\n                        value={this.state.password}\r\n                        onChange={this.handleChange(\"password\")}\r\n                        type=\"password\"\r\n                    />\r\n                    <LoafButton main big onClick={this.logIn}>Login</LoafButton>\r\n                    <LoafButton big onClick={this.props.togglePage}>Sign Up</LoafButton>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private handleChange = (field: \"password\" | \"username\" | \"authCode\") => (e: any) => {\r\n        const value = e.target.value;\r\n        this.setState((state) => ({ ...state, [field]: value }));\r\n    }\r\n\r\n    private logIn = () => {\r\n        API.user.logIn(this.state.username, this.state.password);\r\n    }\r\n\r\n    private validate = () => {\r\n        API.user.authenticate(this.state.authCode);\r\n    }\r\n}\r\n","import { Backdrop, CircularProgress, TextField } from \"@material-ui/core\";\r\nimport API from \"API\";\r\nimport QRCode from \"qrcode\";\r\nimport React, { Component } from \"react\";\r\nimport LoafButton from \"Theme/Components/LoafButton\";\r\nimport * as Loaf from \"./../../API/Loaf\";\r\n\r\ninterface IProps {\r\n    togglePage: () => void;\r\n}\r\n\r\ninterface IState {\r\n    username: string;\r\n    password: string;\r\n    firstName: string;\r\n    loading: boolean;\r\n    done: boolean;\r\n    qrcode: string | null;\r\n}\r\n\r\nexport default class Register extends Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            done: false,\r\n            firstName: \"\",\r\n            loading: false,\r\n            password: \"\",\r\n            qrcode: null,\r\n            username: \"\",\r\n        };\r\n    }\r\n\r\n    public componentDidMount() {\r\n        Loaf.on(\"userCreated\", async (qrcode: string | false) => {\r\n            if (!qrcode) {\r\n                this.setState({ done: true, loading: false });\r\n                return;\r\n            }\r\n            const url = await QRCode.toDataURL(`otpauth://totp/Loaf%20Messenger?secret=${qrcode}`);\r\n\r\n            this.setState({ done: true, loading: false, qrcode: url });\r\n\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"loaf-app-splash\">\r\n                <div id=\"login-page\">\r\n                    {this.renderError()}\r\n                    {this.renderForm()}\r\n                    <LoafButton big onClick={this.props.togglePage}>Sign In</LoafButton>\r\n                </div>\r\n                <Backdrop id=\"splash-backdrop\" open={this.state.loading}>\r\n                    <CircularProgress color=\"inherit\" />\r\n                </Backdrop>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private renderError = () => {\r\n        const { done, loading, qrcode } = this.state;\r\n        if (done && !loading && !qrcode) {\r\n            return <p>There was some error along the way - try again</p>;\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    private renderForm = () => {\r\n        if (this.state.qrcode) {\r\n            return <img src={this.state.qrcode} alt=\"TOTP\" />;\r\n        }\r\n        return <React.Fragment>\r\n            <TextField\r\n                className=\"firstname-input\"\r\n                placeholder=\"First Name\"\r\n                color=\"primary\"\r\n                value={this.state.firstName}\r\n                onChange={this.handleChange(\"firstName\")}\r\n                required\r\n                disabled={this.state.loading}\r\n            />\r\n            <TextField\r\n                className=\"username-input\"\r\n                placeholder=\"Username\"\r\n                color=\"primary\"\r\n                value={this.state.username}\r\n                onChange={this.handleChange(\"username\")}\r\n                required\r\n                disabled={this.state.loading}\r\n            />\r\n            <TextField\r\n                className=\"password-input\"\r\n                placeholder=\"Password\"\r\n                required\r\n                value={this.state.password}\r\n                onChange={this.handleChange(\"password\")}\r\n                type=\"password\"\r\n                disabled={this.state.loading}\r\n            />\r\n            <LoafButton main big onClick={this.register} style={{marginTop:'24px'}}>Register</LoafButton>\r\n        </React.Fragment>;\r\n    }\r\n\r\n    private handleChange = (field: \"password\" | \"username\" | \"firstName\") => (e: any) => {\r\n        const value = e.target.value;\r\n        this.setState((state) => ({ ...state, [field]: value }));\r\n    }\r\n\r\n    private register = () => {\r\n        if (this.state.loading) {\r\n            return;\r\n        }\r\n        this.setState({ loading: true}, () => {\r\n            API.user.register(this.state.username, this.state.password, this.state.firstName);\r\n        });\r\n    }\r\n}\r\n","import { LinearProgress } from \"@material-ui/core\";\r\nimport React, { Component } from \"react\";\r\nimport \"./style.css\";\r\n\r\nexport default class SplashScreen extends Component {\r\n    public render() {\r\n        return (\r\n            <div className=\"loaf-app-splash\">\r\n                <div className=\"progress-container\">\r\n                    <LinearProgress />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport Main from \"./Modules/Main\";\r\nimport * as I from \"./../modules/interface\";\r\nimport api from \"./API\";\r\nimport * as Loaf from \"./API/Loaf\";\r\nimport Login from \"./Modules/Login\";\r\nimport Register from \"./Modules/Register\";\r\nimport Splash from \"./Modules/Splash\";\r\n\r\ninterface IState {\r\n    user: I.IUser | null;\r\n    loading: boolean;\r\n    authentication: boolean;\r\n    register: boolean;\r\n}\r\n\r\nexport default class App extends React.Component<any, IState> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            authentication: false,\r\n            loading: true,\r\n            register: false,\r\n            user: null,\r\n        };\r\n    }\r\n\r\n    public componentDidMount() {\r\n        Loaf.on(\"user\", (user: I.IUser) => {\r\n            this.setState({user, loading: false});\r\n        });\r\n        Loaf.on(\"userStatus\", (status: number) => {\r\n            if (status === 200) {\r\n                this.getUser();\r\n            } else if (status === 403) {\r\n                this.setState({authentication: true});\r\n            }\r\n        });\r\n\r\n        this.getUser();\r\n    }\r\n    public render() {\r\n        const { user, loading, authentication, register } = this.state;\r\n        if (loading) {\r\n            return <Splash />;\r\n        }\r\n        if (user) {\r\n            return <Main />;\r\n        }\r\n        if (register) {\r\n            return <Register togglePage={this.togglePage} />;\r\n        }\r\n        return <Login togglePage={this.togglePage} authentication={authentication}/>;\r\n    }\r\n\r\n    private getUser() {\r\n        const loggedInUser = api.user.get();\r\n\r\n        if (loggedInUser) {\r\n            return this.setState({ user: loggedInUser, loading: false});\r\n        }\r\n        api.user.load();\r\n    }\r\n\r\n    private togglePage = () => {\r\n        this.setState((state) => ({...state, register: !state.register}));\r\n    }\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport App from './App';\r\nimport * as Loaf from \"./API/Loaf\";\r\n\r\ndeclare global {\r\n\tinterface Window {\r\n\t\tipcApi: {\r\n\t\t\tsend: (channel: string, ...arg: any) => void;\r\n            sendSync: (channel: string, ...arg: any) => any,\r\n\t\t\ton: (channel: string, func: (...arg: any) => void) => void;\r\n\t\t};\r\n\t}\r\n}\r\n\r\nexport default () => {\r\n    const [ error, setError ] = useState('');\r\n    const [ showError, setShowError ] = useState(false);\r\n\r\n    const minimize = () => {\r\n        window.ipcApi.send(\"min\");\r\n    }\r\n    const maximize = () => {\r\n        window.ipcApi.send(\"max\");\r\n    }\r\n    const close = () => {\r\n\t\twindow.ipcApi.send('close');\r\n    }\r\n\r\n    useEffect(() => {\r\n        Loaf.on('error-message', (error: string) => {\r\n            setError(error);\r\n            setShowError(true);\r\n            setTimeout(() => {\r\n                setShowError(false);\r\n            }, 5000);\r\n        });\r\n    }, [])\r\n\r\n    return <>\r\n        <div className=\"window-bar\">\r\n            <div className=\"window-drag-bar\"></div>\r\n            <div onClick={minimize} className=\"app-control\">_</div>\r\n            <div onClick={maximize} className=\"app-control\">O</div>\r\n            <div onClick={close} className=\"app-control close\">X</div>\r\n        </div>\r\n        <div className={`error-message ${showError ? 'show': ''}`}>\r\n            {error}\r\n        </div>\r\n        <App />\r\n    </>\r\n\r\n}\r\n/*\r\nexport default class WindowApp extends React.Component<{}, { error: string, showError: boolean}> {\r\n    constructor(props:{}){\r\n        super(props);\r\n        this.state = {\r\n            error: '',\r\n            showError: false\r\n        }\r\n    }\r\n    minimize = () => {\r\n        window.ipcApi.send(\"min\");\r\n    }\r\n    maximize = () => {\r\n        window.ipcApi.send(\"max\");\r\n    }\r\n    close = () => {\r\n\t\twindow.ipcApi.send('close');\r\n    }\r\n    componentDidMount() {\r\n        Loaf.on('error-message', (error: string) => {\r\n            this.setState({ error, showError: true });\r\n            setTimeout(() => {\r\n                this.setState({ showError: false });\r\n            }, 5000);\r\n        });\r\n    }\r\n    render(){\r\n        return <>\r\n            <div className=\"window-bar\">\r\n                <div className=\"window-drag-bar\"></div>\r\n                <div onClick={this.minimize} className=\"app-control\">_</div>\r\n                <div onClick={this.maximize} className=\"app-control\">O</div>\r\n                <div onClick={this.close} className=\"app-control close\">X</div>\r\n            </div>\r\n            <div className={`error-message ${this.state.showError ? 'show': ''}`}>\r\n                {this.state.error}\r\n            </div>\r\n            <App />\r\n        </>\r\n    }\r\n}\r\n*/","\r\nimport { createMuiTheme } from \"@material-ui/core\";\r\nconst theme = createMuiTheme({\r\n    overrides: {\r\n        MuiAppBar: {\r\n            positionFixed: {\r\n                borderBottom: \"2px solid transparent\",\r\n                borderImage: \"linear-gradient(to right,  #ffd66b, #ff8b84) 3\",\r\n                boxShadow: \"none\",\r\n                left: \"0\",\r\n                right: \"auto\",\r\n            },\r\n            positionRelative: {\r\n                borderBottom: \"2px solid transparent\",\r\n                borderImage: \"linear-gradient(to right,  #ffd66b, #ff8b84) 3\",\r\n                boxShadow: \"none\",\r\n                left: \"0\",\r\n                right: \"auto\",\r\n                width: \"100%\",\r\n            },\r\n            root: {\r\n                width: \"34%\",\r\n            },\r\n        },\r\n        MuiButton: {\r\n            textPrimary: {\r\n                color: \"white\",\r\n            },\r\n        },\r\n        MuiDivider: {\r\n            inset: {\r\n                marginRight: \"72px\",\r\n            },\r\n        },\r\n        /*MuiDrawer: {\r\n            paper: {\r\n                backgroundColor: \"#2e2a27 !important\",\r\n            },\r\n        },*/\r\n        MuiListItem: {\r\n            button: {\r\n                transition: \"none !important\",\r\n            },\r\n        },\r\n        MuiListItemIcon: {\r\n            root: {\r\n                marginLeft: \"8px\",\r\n                marginRight: \"4px\",\r\n                transform: \"scale(1.2)\",\r\n            },\r\n        },\r\n        MuiTypography: {\r\n            /*subheading: {\r\n                fontWeight: 500,\r\n            },*/\r\n        },\r\n    },\r\n    palette: {\r\n        primary: {\r\n            dark: \"#161c1f\",\r\n            light: \"#39434a\",\r\n            main: \"#242b2f\",\r\n        },\r\n    },\r\n    typography: {\r\n        fontFamily: \"Montserrat\",\r\n    },\r\n});\r\n\r\nexport default theme;\r\n","import { MuiThemeProvider } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Loaf from \"./Window\";\r\nimport Theme from \"./Theme\";\r\nimport \"./Theme/styles/app.css\";\r\nimport \"./Theme/styles/fonts/montserrat.css\";\r\nimport \"./Theme/styles/index.css\";\r\n\r\nconst App = <MuiThemeProvider theme={Theme}>\r\n    <Loaf />\r\n</MuiThemeProvider>;\r\n\r\nReactDOM.render(App, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}