{"version":3,"sources":["Theme/assets/load_icon.svg","Modules/Message/Request.tsx","Modules/Message/Announcement.tsx","Modules/Message/Message.tsx","Modules/Chat/Chat.tsx","Modules/Chat/ChatsListEntry.tsx","Modules/Main/index.tsx","API/Loaf.ts","API/index.ts","Theme/Components/LoafButton.tsx","Modules/Login/index.tsx","Modules/Splash/index.tsx","App.tsx","Theme/index.ts","index.tsx"],"names":["module","exports","Request","this","props","chat","accept","className","name","CheckCircleRounded","style","color","onClick","id","BlockRounded","Component","Announcement","request","status","Message","message","my","content","Chat","handleKeyDown","e","key","state","form","textMessage","manager","addMessageToStack","sendMessage","setState","handleChange","target","value","bind","messages","AppBar","position","Toolbar","ListItem","ListItemText","inset","primary","secondary","last","length","map","TextField","onChange","onKeyDown","placeholder","fullWidth","variant","InputLabelProps","shrink","getSubText","ChatsListEntry","button","unread","loadChat","moment","date","fromNow","Divider","res","api","Main","loadChats","a","async","chats","get","body","currentChat","chatId","filter","currentMessages","ipcRenderer","window","electron","sendMessageV2","cxt","user","send","store","saveToHex","requestFriend","userId","createPrivateChat","acceptInvitation","newMessage","senderId","toISOString","push","toggleDrawer","drawer","hash","setInterval","Math","random","toString","substr","decipheredMessages","Object","values","decipherMessage","senderMachine","type","deciphered","createdAt","IconButton","aria-label","Menu","Typography","noWrap","src","logo","Search","List","loadMessages","require","eventName","sync","args","sendSync","on","callback","event","vals","authenticate","authCode","Loaf","load","logIn","username","password","LoafButton","main","big","Button","disableElevation","children","Login","field","API","validate","authentication","required","SplashScreen","LinearProgress","App","loading","getUser","loggedInUser","React","theme","createMuiTheme","overrides","MuiAppBar","positionFixed","borderBottom","borderImage","boxShadow","left","right","positionRelative","width","root","MuiDivider","marginRight","MuiDrawer","paper","backgroundColor","MuiListItem","transition","MuiListItemIcon","marginLeft","transform","MuiTypography","palette","dark","light","typography","fontFamily","Theme","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.beca0276.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/load_icon.1b2bc4e4.svg\";","import { BlockRounded, CheckCircleRounded } from \"@material-ui/icons\";\r\nimport React, { Component } from \"react\";\r\nimport * as I from \"./../../../modules/interface\";\r\n\r\nexport default class Request extends Component<{ chat: I.IChat, accept: (chatId: number) => void }, any> {\r\n    public render() {\r\n        const { chat, accept } = this.props;\r\n        return <div className={\"announcement message\"}>\r\n            <div>\r\n                <p>You've got a request from <strong>{chat.name}</strong>. Accept?</p>\r\n                <p>\r\n                    <CheckCircleRounded\r\n                        style={{ color: \"#49a249\" }}\r\n                        onClick={() => accept(chat.id)} />\r\n                    <BlockRounded style={{ color: \"red\" }} />\r\n                </p>\r\n            </div>\r\n        </div>;\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport * as I from \"./../../../modules/interface\";\r\nimport Request from \"./Request\";\r\n\r\nexport default class Announcement extends Component<{ request: boolean, chat: I.IChat }> {\r\n    public render() {\r\n        const { chat, request } = this.props;\r\n        if (request) {\r\n            return <Request chat={chat} accept={() => {/** */}}/>;\r\n        }\r\n        return <div className={\"announcement message\"}>\r\n            <p>{\r\n                chat.status === 5 ?\r\n                `${chat.name} still hasn't accepted your request`\r\n                : \"No messages\"\r\n                }\r\n            </p>\r\n        </div>;\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport * as I from \"./../../../modules/interface\";\r\n\r\nexport default class Message extends Component<{message: I.IMessage}, any> {\r\n    public render() {\r\n        return <div className={\"message \" + (this.props.message.my ? \"my\" : \"\")}>\r\n            <p>{this.props.message.content}</p>\r\n        </div>;\r\n    }\r\n}\r\n","\r\nimport { AppBar, Avatar, ListItem, ListItemText, TextField, Toolbar } from \"@material-ui/core\";\r\nimport React, { Component } from \"react\";\r\n// import * as API from './api';\r\nimport Announcement from \"../Message/Announcement\";\r\nimport Message from \"../Message/Message\";\r\nimport * as I from \"./../../../modules/interface\";\r\nimport * as Utils from \"./../Utils\";\r\n\r\ninterface IProps {\r\n    chat: I.IChat | null;\r\n    manager: any;\r\n    messages: I.IMessage[];\r\n}\r\n\r\ninterface IState {\r\n    form: {\r\n        textMessage: string;\r\n    };\r\n}\r\n\r\nexport default class Chat extends Component<IProps, IState> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleKeyDown = this.handleKeyDown.bind(this);\r\n        this.state = {\r\n            form: {\r\n                textMessage: \"\",\r\n            },\r\n        };\r\n    }\r\n    public handleKeyDown = (e: any) => {\r\n        if (e.key === \"Enter\" && this.state.form.textMessage && this.props.chat) {\r\n            this.props.manager.addMessageToStack(this.state.form.textMessage, this.props.chat.id);\r\n            this.props.manager.sendMessage(this.state.form.textMessage, this.props.chat.id);\r\n            this.setState({ form: { textMessage: \"\" } });\r\n        }\r\n    }\r\n    public handleChange = (e: any) => {\r\n        const { form } = this.state;\r\n        const field: \"textMessage\" = e.target.name;\r\n        form[field] = e.target.value;\r\n        this.setState({ form });\r\n    }\r\n    public render() {\r\n        if (!this.props.chat) {\r\n            return <div className=\"chat_container\">Choose chat</div>;\r\n        }\r\n        const { chat, messages } = this.props;\r\n        // console.log(this.props.messages)\r\n        return (\r\n            <div className=\"chat_container\">\r\n                <AppBar position=\"relative\" >\r\n                    <Toolbar className=\"bar\">\r\n                        <ListItem>\r\n                            {/*chat.image ?\r\n                            <Avatar src={API.config.apiUrl + 'chats/image?chatId=' + chat.id} className='avatar' /> :\r\n                            <Avatar className=\"avatar\" style={{ backgroundColor: textToRGB(chat.name) }}>\r\n                            {chat.name.charAt(0) && chat.name.charAt(0).toUpperCase() || '#'}</Avatar>*/}\r\n                            <ListItemText inset\r\n                                primary={\r\n                                    <div className={\"chat-name\"}>\r\n                                        <div className=\"chat-name-text\">{chat.name}</div>\r\n                                    </div>\r\n                                } secondary={\r\n\r\n                                    <div className=\"chat-last-message\">\r\n                                        <div className=\"text\">\r\n                                            { chat.last?.my ?\r\n                                                <span className=\"you\">Ty:</span>\r\n                                            : \"\" } Last seen 10 minutes ago</div>\r\n                                    </div>} />\r\n                        </ListItem>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <div className={\"message_container\"}>\r\n                    { chat.status === 1 || !messages.length ?\r\n                    <Announcement\r\n                        request={chat.status === 1}\r\n                        chat={chat}\r\n                        /* manager={this.props.manager}*/\r\n                    /> : \"\"}\r\n                    {chat.status === 2 ? messages.map((message) => <Message message={message} />) : \"\"}\r\n                </div>\r\n                {this.props.chat.status === 2 ? <div className=\"text_sender\">\r\n                    <TextField\r\n                        onChange={this.handleChange}\r\n                        name=\"textMessage\"\r\n                        onKeyDown={this.handleKeyDown}\r\n                        id=\"full-width\"\r\n                        placeholder=\"Placeholder\"\r\n                        fullWidth\r\n                        value={this.state.form.textMessage}\r\n                        variant=\"outlined\"\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                    />\r\n                </div> : \"\"}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n/*\r\n\r\n          <div onClick={() => {\r\n            if(this.props.chat) this.props.manager.sendMessage(\"Dupa\", this.props.chat.id)\r\n          }}>SEND MESSAGE</div>\r\n\r\n            {this.state.chats.map((chat: any) => <div>CHAT:{chat.name}, STAT\r\n            S: {chat.status} {chat.status ===1 ? <div onClick={() => this.acce\r\n                ptInvitation(chat.id)}>ACCEPT INVITATION</div> : ''}</div>)}\r\n            <div onClick={() => this.requestFriend(2)}>Add Friend</div>\r\n            <div onClick={() => this.loadMessages(1)}>Get messages</div>*/\r\n","import { Avatar, Divider, IconButton, ListItem, ListItemText } from \"@material-ui/core\";\r\nimport { CheckCircleRounded } from \"@material-ui/icons\";\r\nimport moment from \"moment\";\r\nimport React, { Component } from \"react\";\r\n// import * as API from \"./api\";\r\nimport * as I from \"./../../../modules/interface\";\r\nimport * as Utils from \"./../Utils\";\r\n\r\nfunction getSubText(chat: I.IChat) {\r\n    switch (chat.status) {\r\n        case 5:\r\n            return \"Waiting for response...\";\r\n        case 2:\r\n            return chat.last && chat.last.content || \"No messages\";\r\n        case 1:\r\n            return <span className=\"strong\">requested your attention</span>;\r\n        default:\r\n            return \"\";\r\n    }\r\n}\r\n\r\nexport default class ChatsListEntry extends Component<{ chat: I.IChat, loadChat: any }, any> {\r\n    public render() {\r\n        const { chat } = this.props;\r\n        return (\r\n            <div>\r\n                <ListItem button\r\n                    className={\"chat-button \" + (chat.unread ? \"new-message\" : \"\")}\r\n                    onClick={() => this.props.loadChat(chat.id)}\r\n                >\r\n                    {/*chat.image ?\r\n                    <Avatar src={API.config.apiUrl + \"chats/image?chatId=\" + chat.id} className=\"avatar\"/> :\r\n                    <Avatar className=\"avatar\" style={{backgroundColor: textToRGB(chat.name)}}>\r\n                    {chat.name.charAt(0) && chat.name.charAt(0).toUpperCase() || \"#\"}\r\n                    </Avatar>*/}\r\n                    <ListItemText inset\r\n                        primary={\r\n                            <div className={\"chat-name\"}>\r\n                                <div className=\"chat-name-text\">{chat.name}</div>\r\n                                <div className=\"last-message-date\">\r\n                                    {chat.last ? moment(chat.last.date).fromNow() : \"\"}\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                        secondary={\r\n                            <div className=\"chat-last-message\">\r\n                                <div className=\"text\">\r\n                                    {chat.last?.my ? <span className=\"you\">You:</span> : \"\"} {getSubText(chat)}\r\n                                </div>\r\n                                <div className={\"last-text-status \" /*+ (chat.lastYours ? chat.status : '')*/}></div>\r\n                            </div>\r\n                        }\r\n                    />\r\n                </ListItem>\r\n                <li>\r\n                    <Divider variant=\"inset\" className=\"separator\" />\r\n                </li>\r\n            </div>);\r\n    }\r\n}\r\n","import { List, SwipeableDrawer } from \"@material-ui/core\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { Menu as MenuIcon, Search as SearchIcon } from \"@material-ui/icons\";\r\nimport moment from \"moment\";\r\nimport React, { Component } from \"react\";\r\nimport * as I from \"../../../modules/interface\";\r\nimport Chat from \"../Chat/Chat\";\r\nimport ChatsListEntry from \"../Chat/ChatsListEntry\";\r\nimport logo from \"./../../Theme/assets/load_icon.svg\";\r\n// import { IUserContext } from \"./Context\";\r\n// import DrawerContent from \"./../components/Drawer\";\r\n// import api from \"./api\";\r\n\r\n// import * as I from \"./definitions/interface\";\r\n\r\ndeclare const window: any;\r\nconst res: any = {};\r\nconst api: any = {};\r\n\r\ninterface IProps {\r\n    cxt: any;\r\n}\r\n\r\ninterface IState {\r\n    drawer: boolean;\r\n    chats: I.IChat[];\r\n    currentChat: I.IChat | null;\r\n    messages: any;\r\n    currentMessages: I.IMessage[];\r\n    hash: string;\r\n}\r\n\r\nexport default class Main extends Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            chats: [],\r\n            currentChat: null,\r\n            currentMessages: [],\r\n            drawer: false,\r\n            hash: \"\",\r\n            messages: {},\r\n        };\r\n    }\r\n    public async componentDidMount() {\r\n        return;\r\n        const socket = this.props.cxt.socket;\r\n        if (socket) {\r\n            socket.on(\"message\", (data: any) => {\r\n                if (data.chatId) {\r\n                    this.loadChats();\r\n                    this.loadMessages(data.chatId);\r\n                }\r\n            });\r\n            socket.on(\"chat\", () => {\r\n                this.loadChats();\r\n            });\r\n        }\r\n        await this.props.cxt.loadStore();\r\n        this.loadChats();\r\n        setInterval(() => {\r\n            this.setState({hash: Math.random().toString(36).substr(2, 5)});\r\n        }, 30000);\r\n\r\n    }\r\n    public loadChats = async () => {\r\n        const request = await api.chats.get();\r\n        const chats: { chats: I.IChat[] } = request.body;\r\n        this.setState({ chats: chats.chats }, () => {\r\n            if (this.state.currentChat && this.state.currentChat.id) {\r\n                this.loadChat(this.state.currentChat.id);\r\n            }\r\n        });\r\n    }\r\n    public loadChat = (chatId: number) => {\r\n        this.setState({\r\n            currentChat: this.state.chats.filter((chat) => chat.id === chatId)[0] || null,\r\n            currentMessages: this.state.messages[chatId] || [],\r\n        });\r\n    }\r\n    public sendMessage = async (content: string, chatId: number) => {\r\n        const { ipcRenderer } = window.electron;\r\n        await api.chats.sendMessageV2(content, chatId, this.props.cxt);\r\n\r\n        if (this.props.cxt && this.props.cxt.user) {\r\n            ipcRenderer.send(\"saveUserData\", this.props.cxt.user.id, this.props.cxt.store.saveToHex());\r\n        }\r\n    }\r\n    public requestFriend = async (userId: number) => {\r\n        // console.log(userId);\r\n        await api.chats.createPrivateChat(userId);\r\n        this.loadChats();\r\n    }\r\n    public acceptInvitation = async (chatId: number) => {\r\n        await api.chats.accept(chatId, this.props.cxt);\r\n        this.loadChats();\r\n    }\r\n    public addMessageToStack = async (content: any, chatId: number) => {\r\n        if (!this.props.cxt.user || !this.props.cxt.user.id) return;\r\n        const messages = this.state.messages[chatId] || [];\r\n        const newMessage = { senderId: this.props.cxt.user.id, content, my: true, date: moment().toISOString() };\r\n        const chats = this.state.chats.map((chat) => {\r\n            if (chat.id !== chatId) return chat;\r\n\r\n            return { ...chat, last: newMessage};\r\n        });\r\n\r\n        messages.push(newMessage);\r\n        this.setState({ messages: { ...this.state.messages, [chatId]: messages }, chats }, () => {\r\n            if (this.state.currentChat && this.state.currentChat.id === chatId) {\r\n                this.loadChat(chatId);\r\n            }\r\n        });\r\n    }\r\n    public async loadMessages(chatId: number) {\r\n        const { ipcRenderer } = window.electron;\r\n        await this.loadChats();\r\n        // const res = await api.chats.getMessages(chatId, this.props.cxt.machineId);\r\n        if (!res.body) return;\r\n        const messages: any[] = res.body.messages;\r\n        const decipheredMessages = this.state.messages[chatId] || [];\r\n        for (const message of Object.values(messages)) {\r\n            const deciphered = await this.props.cxt.store.decipherMessage(message.senderId,\r\n                message.senderMachine,\r\n                message.content,\r\n                message.type === 3,\r\n            );\r\n            decipheredMessages.push({\r\n                content: deciphered,\r\n                date: message.createdAt,\r\n                id: message.id,\r\n                my: this.props.cxt.user && message.senderId === this.props.cxt.user.id,\r\n                senderId: message.senderId,\r\n            });\r\n        }\r\n        const chats = this.state.chats.map((chat) => {\r\n            if (chat.id !== chatId) return chat;\r\n            if (!decipheredMessages.length) return chat;\r\n            return { ...chat, last: decipheredMessages[decipheredMessages.length - 1]};\r\n        });\r\n        if (this.props.cxt && this.props.cxt.user) {\r\n            ipcRenderer.send(\"saveUserData\", this.props.cxt.user.id, this.props.cxt.store.saveToHex());\r\n        }\r\n        this.setState({ messages: { ...this.state.messages, [chatId]: decipheredMessages }, chats }, () => {\r\n            if (this.state.currentChat && this.state.currentChat.id === chatId) {\r\n                this.loadChat(chatId);\r\n            }\r\n        });\r\n    }\r\n    public toggleDrawer = () => {\r\n        this.setState({ ...this.state, drawer: !this.state.drawer });\r\n    }\r\n    public render() {\r\n        return (\r\n            <div className=\"loaf-app\">\r\n                <AppBar position=\"fixed\" >\r\n                    <Toolbar className=\"bar\">\r\n                        <IconButton className=\"menuButton\" color=\"inherit\" aria-label=\"Open drawer\">\r\n                            <MenuIcon onClick={this.toggleDrawer} />\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\" color=\"inherit\" noWrap className=\"logo-wrapper\">\r\n                            <img src={logo} />\r\n                        </Typography>\r\n                        <div className=\"searchIcon\">\r\n                            <SearchIcon />\r\n                        </div>\r\n\r\n                    </Toolbar>\r\n                </AppBar>\r\n                {/*<SwipeableDrawer\r\n                    open={this.state.drawer}\r\n                    onOpen={this.toggleDrawer}\r\n                    onClose={this.toggleDrawer}\r\n                    className=\"sidenav-container\" >\r\n                    <DrawerContent />\r\n                </SwipeableDrawer>*/}\r\n                <div className=\"playground\">\r\n                    <div className=\"chat-list\">\r\n                        <List>\r\n                            {this.state.chats.map((chat) => <ChatsListEntry chat={chat} loadChat={this.loadChat} />)}\r\n                            <div onClick={() => this.requestFriend(6)}>Add Friend</div>\r\n                            <div onClick={() => this.loadMessages(1)}>Get messages</div>\r\n                        </List>\r\n                    </div>\r\n                    <Chat\r\n                        chat={this.state.currentChat}\r\n                        manager={{\r\n                            accept: this.acceptInvitation,\r\n                            addMessageToStack: this.addMessageToStack,\r\n                            sendMessage: this.sendMessage,\r\n                        }}\r\n                        messages={this.state.currentMessages}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","const electron = window.require(\"electron\");\r\nconst ipcRenderer = electron.ipcRenderer;\r\n\r\nexport const api = (eventName: string, sync: boolean, ...args: any[]) => {\r\n    if (sync) {\r\n        return ipcRenderer.sendSync(eventName, ...args);\r\n    }\r\n    ipcRenderer.send(eventName, ...args);\r\n    return;\r\n    // return new Promise((res, rej) => {\r\n        /*ipcRenderer.on(`${eventName}`, (event, ...vals) => {\r\n            //\r\n            ipcRenderer.removeAllListeners(`${eventName}`);\r\n        });*/\r\n   // });\r\n};\r\n\r\nexport const on = (eventName: string, callback: (...args: any[]) => void) => {\r\n    ipcRenderer.on(eventName, (event: any, ...vals: any[]) => {\r\n        callback(...vals);\r\n    });\r\n};\r\n","import * as Loaf from \"./Loaf\";\r\n\r\nconst api = {\r\n    user: {\r\n        authenticate: (authCode: number) => Loaf.api(\"authenticateUser\", false, authCode),\r\n        get: () => Loaf.api(\"getUser\", true),\r\n        load: () => Loaf.api(\"loadUser\", false),\r\n        logIn: (username: string, password: string) => Loaf.api(\"logInUser\", false, username, password),\r\n    },\r\n};\r\n\r\nexport default api;\r\n","import { Button } from \"@material-ui/core\";\r\nimport React, { Component } from \"react\";\r\n\r\ninterface IProps {\r\n    secondary?: boolean;\r\n    main?: boolean;\r\n    big?: boolean;\r\n    onClick?: () => void;\r\n}\r\n\r\nexport default class LoafButton extends Component<IProps> {\r\n    public render() {\r\n        const { main, big, onClick, secondary } = this.props;\r\n        return (\r\n            <Button variant={main ? \"contained\" : \"text\"}\r\n                onClick={onClick}\r\n                disableElevation\r\n                className={big ? \"big-button\" : \"\"}\r\n                color={secondary ? \"secondary\" : \"primary\"}>\r\n                {this.props.children}\r\n            </Button>\r\n        );\r\n    }\r\n}\r\n","import { TextField } from \"@material-ui/core\";\r\nimport API from \"API\";\r\nimport React, { Component } from \"react\";\r\nimport LoafButton from \"Theme/Components/LoafButton\";\r\n\r\ninterface IProps {\r\n    authentication?: boolean;\r\n}\r\n\r\ninterface IState {\r\n    username: string;\r\n    password: string;\r\n    authCode: number;\r\n}\r\n\r\nexport default class Login extends Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            authCode: 0,\r\n            password: \"\",\r\n            username: \"\",\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        if (this.props.authentication) {\r\n            return (\r\n                <div className=\"loaf-app-splash\">\r\n                    <div id=\"login-page\">\r\n                        <TextField\r\n                            type=\"number\"\r\n                            className=\"username-input\"\r\n                            placeholder=\"Username\"\r\n                            color=\"primary\"\r\n                            value={this.state.authCode}\r\n                            onChange={this.handleChange(\"authCode\")}\r\n                            required\r\n                        />\r\n                        <LoafButton main big onClick={this.validate}>Authenticate</LoafButton>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        return (\r\n            <div className=\"loaf-app-splash\">\r\n                <div id=\"login-page\">\r\n                    <TextField\r\n                        className=\"username-input\"\r\n                        placeholder=\"Username\"\r\n                        color=\"primary\"\r\n                        value={this.state.username}\r\n                        onChange={this.handleChange(\"username\")}\r\n                        required\r\n                    />\r\n                    <TextField\r\n                        className=\"password-input\"\r\n                        placeholder=\"Password\"\r\n                        required\r\n                        value={this.state.password}\r\n                        onChange={this.handleChange(\"password\")}\r\n                        type=\"password\"\r\n                    />\r\n                    <LoafButton main big onClick={this.logIn}>Login</LoafButton>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private handleChange = (field: \"password\" | \"username\" | \"authCode\") => (e: any) => {\r\n        const value = e.target.value;\r\n        this.setState((state) => ({ ...state, [field]: value }));\r\n    }\r\n\r\n    private logIn = () => {\r\n        API.user.logIn(this.state.username, this.state.password);\r\n    }\r\n\r\n    private validate = () => {\r\n        API.user.authenticate(this.state.authCode);\r\n    }\r\n}\r\n","import { LinearProgress } from \"@material-ui/core\";\r\nimport React, { Component } from \"react\";\r\nimport \"./style.css\";\r\n\r\nexport default class SplashScreen extends Component {\r\n    public render() {\r\n        return (\r\n            <div className=\"loaf-app-splash\">\r\n                <div className=\"progress-container\">\r\n                    <LinearProgress />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import Main from \"Modules/Main\";\r\nimport React from \"react\";\r\nimport * as I from \"./../modules/interface\";\r\nimport api from \"./API\";\r\nimport * as Loaf from \"./API/Loaf\";\r\nimport Login from \"./Modules/Login\";\r\nimport Splash from \"./Modules/Splash\";\r\n\r\ninterface IState {\r\n    user: I.IUser | null;\r\n    loading: boolean;\r\n    authentication: boolean;\r\n}\r\n\r\nexport default class App extends React.Component<any, IState> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            authentication: false,\r\n            loading: true,\r\n            user: null,\r\n        };\r\n    }\r\n\r\n    public componentDidMount() {\r\n        Loaf.on(\"user\", (user: I.IUser) => {\r\n            // console.log(user);\r\n            this.setState({user, loading: false});\r\n        });\r\n        Loaf.on(\"userStatus\", (status: number) => {\r\n            if (status === 200) {\r\n                this.getUser();\r\n            } else if (status === 403) {\r\n                this.setState({authentication: true});\r\n            }\r\n        });\r\n        this.getUser();\r\n    }\r\n    public render() {\r\n        const { user, loading, authentication } = this.state;\r\n        if (loading) {\r\n            return <Splash />;\r\n        }\r\n        if (user) {\r\n            return <Main cxt={user} />;\r\n        }\r\n        return <Login authentication={authentication}/>;\r\n    }\r\n\r\n    private getUser() {\r\n        const loggedInUser = api.user.get();\r\n\r\n        if (loggedInUser) {\r\n            // console.log(loggedInUser);\r\n            return this.setState({ user: loggedInUser, loading: false});\r\n        }\r\n        api.user.load();\r\n    }\r\n}\r\n","\r\nimport { createMuiTheme } from \"@material-ui/core\";\r\nconst theme = createMuiTheme({\r\n    overrides: {\r\n        MuiAppBar: {\r\n            positionFixed: {\r\n                borderBottom: \"2px solid transparent\",\r\n                borderImage: \"linear-gradient(to right,  #ffd66b, #ff8b84) 3\",\r\n                boxShadow: \"none\",\r\n                left: \"0\",\r\n                right: \"auto\",\r\n            },\r\n            positionRelative: {\r\n                borderBottom: \"2px solid transparent\",\r\n                borderImage: \"linear-gradient(to right,  #ffd66b, #ff8b84) 3\",\r\n                boxShadow: \"none\",\r\n                left: \"0\",\r\n                right: \"auto\",\r\n                width: \"100%\",\r\n            },\r\n            root: {\r\n                width: \"34%\",\r\n            },\r\n        },\r\n        MuiDivider: {\r\n            inset: {\r\n                marginRight: \"72px\",\r\n            },\r\n        },\r\n        MuiDrawer: {\r\n            paper: {\r\n                backgroundColor: \"#2e2a27 !important\",\r\n            },\r\n        },\r\n        MuiListItem: {\r\n            button: {\r\n                transition: \"none !important\",\r\n            },\r\n        },\r\n        MuiListItemIcon: {\r\n            root: {\r\n                marginLeft: \"8px\",\r\n                marginRight: \"4px\",\r\n                transform: \"scale(1.2)\",\r\n            },\r\n        },\r\n        MuiTypography: {\r\n            /*subheading: {\r\n                fontWeight: 500,\r\n            },*/\r\n        },\r\n    },\r\n    palette: {\r\n        primary: {\r\n            dark: \"#161c1f\",\r\n            light: \"#39434a\",\r\n            main: \"#242b2f\",\r\n        },\r\n    },\r\n    typography: {\r\n        fontFamily: \"Montserrat\",\r\n    },\r\n});\r\n\r\nexport default theme;\r\n","import { MuiThemeProvider } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Loaf from \"./App\";\r\nimport Theme from \"./Theme\";\r\nimport \"./Theme/styles/app.css\";\r\nimport \"./Theme/styles/fonts/montserrat.css\";\r\nimport \"./Theme/styles/index.css\";\r\n\r\nconst App = <MuiThemeProvider theme={Theme}>\r\n    <Loaf />\r\n</MuiThemeProvider>;\r\n\r\nReactDOM.render(App, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}